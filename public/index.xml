<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中文手册(WIP)</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 中文手册(WIP)</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基本用法</title>
      <link>http://localhost:1313/docs/query/metricsql/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/metricsql/basic/</guid>
      <description>&lt;h2 id=&#34;过滤器&#34;&gt;过滤器&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/onpelg16wg77xin6&#34;&gt;数据查询&lt;/a&gt;部分我们已经用 MetricsQL 获取了指标 &lt;code&gt;foo_bar&lt;/code&gt; 的数据。只需在查询中写入指标名称，就能轻松完成：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo_bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个简单的指标名称会得到拥有不同 label 组合的多个 Timeseries 返回响应值。比如：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;requests_total{path=&amp;#34;/&amp;#34;, code=&amp;#34;200&amp;#34;} &#xA;requests_total{path=&amp;#34;/&amp;#34;, code=&amp;#34;403&amp;#34;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要选择具有特定 Label 的 Timeseries，需要在花括号中指定匹配 Label 的过滤器：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;requests_total{code=&amp;#34;200&amp;#34;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的查询语句返回所有名字是 &lt;code&gt;requests_total &lt;/code&gt;并且 Label 带有&lt;code&gt;code=&amp;quot;200&amp;quot;&lt;/code&gt;的所有&lt;code&gt;Timeseries&lt;/code&gt;。我们用&lt;code&gt;=&lt;/code&gt;运算符来匹配 Label 值。对于反匹配使用&lt;code&gt;!=&lt;/code&gt;运算符。过滤器也通过&lt;code&gt;=~&lt;/code&gt;实现正则匹配，用&lt;code&gt;!~&lt;/code&gt;实现正则反匹配。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;requests_total{code=~&amp;#34;2.*&amp;#34;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;过滤器也可以被组合使用：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;requests_total{code=~&amp;#34;200&amp;#34;, path=&amp;#34;/home&amp;#34;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的查询返回所有名字是&lt;code&gt;request_total&lt;/code&gt;，同时带有 &lt;code&gt;code=&amp;quot;200&amp;quot;&lt;/code&gt; 和 &lt;code&gt;path=&amp;quot;/home&amp;quot;&lt;/code&gt; Label 的所有 Timeseries。&lt;/p&gt;&#xA;&lt;h3 id=&#34;使用名字过滤&#34;&gt;使用名字过滤&lt;/h3&gt;&#xA;&lt;p&gt;有时我们可能需要同时返回多个监控指标。就如同&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/usya0z8utkby2rog&#34;&gt;数据模型&lt;/a&gt;中提到的，Metric 名称本质上也是一个普通的 Label 的值，其 Label 名是&lt;code&gt;__name__&lt;/code&gt;。所以可以通过对 Metric 名使用正则的方式，来过滤出多个指标名的数据：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;{__name__=~&amp;#34;requests_(error|success)_total&amp;#34;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的查询语句会返回 2 个 Metric 的 Timeseries：&lt;code&gt;requests_error_total&lt;/code&gt; 和&lt;code&gt;requests_success_total&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;利用-or-使用多个过滤器&#34;&gt;利用 or 使用多个过滤器&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html&#34;&gt;MetricsQL&lt;/a&gt; 支持查询至少满足多个过滤器中的一个方式来获取 Timeseries。这些过滤器必须在花括号内使用 &lt;code&gt;or&lt;/code&gt; 分割。 比如，下面的查询代表查询 Label 满足 &lt;code&gt;{job=&amp;quot;app1&amp;quot;,env=&amp;quot;prod&amp;quot;}&lt;/code&gt; 或 &lt;code&gt;{job=&amp;quot;app2&amp;quot;,env=&amp;quot;dev&amp;quot;}&lt;/code&gt; 的 Timeseries：&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何处理磁盘空间不足</title>
      <link>http://localhost:1313/docs/ops/disk-space/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/ops/disk-space/</guid>
      <description>&lt;p&gt;磁盘空间属于前期规划的，这种事故主要是因为前期规划失误。只能临时补救。具体有如下集中方法&lt;/p&gt;&#xA;&lt;h2 id=&#34;强行-merge&#34;&gt;强行 merge&lt;/h2&gt;&#xA;&lt;p&gt;让 vmstorage 执行 merge，会将多个 part merge 成一个 part，减少磁盘空间。有数据持续写入的 partition 会自动触发 merge，不要去强制 merge。所以只对历史 partition 进行 merge。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 参数 partition_prefix 指定 partition，partition 的名字在 $DATA/data/small 下可以看到&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://localhost:8442/internal/force_merge?partition_prefix=2022_01&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果如图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;disk-usage.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;磁盘使用率上升是因为 merge 过程创建新的 part 来  merge 老的多个 parts。突然下降代表 merge 结束，删掉老的 parts。&lt;/p&gt;&#xA;&lt;p&gt;整个 merge 过程，CPU 和 Memory 几乎没有什么影响。merge 的耗时数个小时，跟数据量大小有关。&lt;/p&gt;&#xA;&lt;h2 id=&#34;等待&#34;&gt;等待&lt;/h2&gt;&#xA;&lt;p&gt;如上所述，系统对多个 part 进行 merge 时，会临时使用一定的磁盘空间，合并后将老的 part 删除就会释放。&lt;/p&gt;&#xA;&lt;p&gt;因此在磁盘不足时，可查看 vmstorage 是否正在执行 merge，如果是，可以等待其执行完毕。一次 merge 可能会执行是个小时甚至数天。&lt;/p&gt;&#xA;&lt;h2 id=&#34;删除-cache&#34;&gt;删除 cache&lt;/h2&gt;&#xA;&lt;p&gt;如果 cache 目录比较大，可以删除。但通常不会太大。&lt;/p&gt;&#xA;&lt;h2 id=&#34;强制删除历史-partition&#34;&gt;强制删除历史 partition&lt;/h2&gt;&#xA;&lt;p&gt;删除历史数据是最直接的。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;先 stop 掉 vmstorage 组件。&lt;/li&gt;&#xA;&lt;li&gt;删除 &lt;code&gt;$DATA/data/{big,small}/YYYY_MM&lt;/code&gt; 目录。&lt;/li&gt;&#xA;&lt;li&gt;启动 vmstorage。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;只有一个-partition-&#34;&gt;只有一个 partition ?&lt;/h2&gt;&#xA;&lt;p&gt;也就是这一个月而数据磁盘都扛不住，那么只能删除 part。part 的文件夹名称，包含着这个 part 的时间范围。可以根据这些数据删除历史 part。&lt;/p&gt;</description>
    </item>
    <item>
      <title>核心概念</title>
      <link>http://localhost:1313/docs/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/concepts/</guid>
      <description>&lt;p&gt;本文主要阐述一些词汇概念的基本定义，如果你对这些基本概念或词汇没有基本的了解，对本书中的大部分内容的理解上都会有一些困难。&lt;/p&gt;&#xA;&lt;p&gt;有一些专业英文词汇是不翻译的，比如 Metric、Labels、TimeSeries 等，因为这些专业属于很频繁，强行寻找一个对应的中文词汇反而会增加理解成本。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-metric度量指标&#34;&gt;什么是 Metric（度量指标）&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;不翻译&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;简单来说，&lt;code&gt;metric&lt;/code&gt;是对事物的数值测量或观察。&lt;/p&gt;&#xA;&lt;p&gt;Metric 最常见的用途包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查系统在特定时间段内的行为；&lt;/li&gt;&#xA;&lt;li&gt;将行为变化与其他测量结果相关联；&lt;/li&gt;&#xA;&lt;li&gt;观察或预测趋势；&lt;/li&gt;&#xA;&lt;li&gt;如果度量标准超过阈值，则触发事件（告警）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;metric-结构&#34;&gt;Metric 结构&lt;/h2&gt;&#xA;&lt;p&gt;让我们从一个例子开始。为了追踪我们的应用程序处理了多少请求，我们将定义一个名为&lt;code&gt;requests_total&lt;/code&gt;的指标。&lt;/p&gt;&#xA;&lt;p&gt;在这里你可以更具体一些，比如说&lt;code&gt;requests_success_total&lt;/code&gt;（仅针对成功的请求）或者&lt;code&gt;request_errors_total&lt;/code&gt;（针对失败的请求）。&lt;/p&gt;&#xA;&lt;p&gt;选择一个指标名称非常重要，它应该能够清楚地向每个看到它的人传达正确信息：实际测量到了什么内容；就像编程中的变量名一样。在其他的 tsdb 中，也有使用 &lt;strong&gt;measurement&lt;/strong&gt; 这个单词的，其表达的核心内容是一样的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;labels标签&#34;&gt;Labels（标签）&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;不翻译&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;每个指标都可以包含额外的元信息，以 Label 对的形式呈现：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requests_total&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;path=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; code=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requests_total&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;path=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; code=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;403&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指标元信息，即一组用花括号括起来的键值对，为我们提供了&lt;code&gt;request&lt;/code&gt;被处理的&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;status code&lt;/code&gt;的上下文。Label 的值始终是&lt;code&gt;string&lt;/code&gt;类型。VictoriaMetrics数据模型是无模式的（No Scheme），即没有预先定义的表结构，用户不需要预先定义指标名称或其标签，而是可以随时添加或更改已采用的指标。&lt;/p&gt;&#xA;&lt;p&gt;实际上，指标名称也是一个具有特殊名称&lt;code&gt;__name__&lt;/code&gt;的 Label。因此，以下两个系列是相同的：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requests_total&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;path=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; code=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;__name__=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requests_total&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; path=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; code=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Labels可以自动附加到通过vmagent或Prometheus采集的 &lt;a href=&#34;#zZt47&#34;&gt;timeseries&lt;/a&gt; 上。VictoriaMetrics支持对查询API强制执行 Label 过滤器以实现数据的软隔离。然而，真正的数据隔离可以通过&lt;a href=&#34;#S6Dpt&#34;&gt;多租户&lt;/a&gt;实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;timeseries时间序列&#34;&gt;Timeseries（时间序列）&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;不翻译&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;一个指标名称和其 Label 的组合定义了一个 timeseries。例如，&lt;code&gt;requests_total{path=&amp;quot;/&amp;quot;, code=&amp;quot;200&amp;quot;}&lt;/code&gt; 和&lt;code&gt; requests_total{path=&amp;quot;/&amp;quot;, code=&amp;quot;403&amp;quot;}&lt;/code&gt; 是两个不同的 timeseries，因为它们在&lt;code&gt;code&lt;/code&gt;标签上有不同的值。&lt;/p&gt;&#xA;&lt;p&gt;唯一时间序列的数量对数据库资源用量产生影响。详细信息请参阅&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/dh8a9omrcvlana4n#what-is-an-active-time-series&#34;&gt;什么是活跃时间序列&lt;/a&gt;以及&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/dh8a9omrcvlana4n#gao-liu-shilshi-zhi-shen-me&#34;&gt;什么是高流失率&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cardinality基数&#34;&gt;Cardinality（基数）&lt;/h2&gt;&#xA;&lt;p&gt;唯一时间序列的数量被称为基数。过多的唯一时间序列被称为&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/dh8a9omrcvlana4n#shen-me-shi-gao-ji-shu&#34;&gt;高基数&lt;/a&gt;。高基数可能导致在VictoriaMetrics中增加资源使用量。请参阅&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/dh8a9omrcvlana4n#shen-me-shi-gao-ji-shu&#34;&gt;这篇文档&lt;/a&gt;以获取更多详细信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;raw-samples原始样本&#34;&gt;Raw samples（原始样本）&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;不翻译&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;每个唯一的时间序列可以由任意数量的&lt;code&gt;（value，timestamp）&lt;/code&gt;数据点（也称为&lt;code&gt;原始样本&lt;/code&gt;）组成，它们按照&lt;code&gt;timestamp&lt;/code&gt;排序。&lt;code&gt;value&lt;/code&gt;是&lt;a href=&#34;https://en.wikipedia.org/wiki/Double-precision_floating-point_format&#34;&gt;双精度浮点数&lt;/a&gt;。&lt;code&gt;timestamp&lt;/code&gt;是具有毫秒精度的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time&#34;&gt;Unix 时间戳&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;以下是一个&lt;a href=&#34;https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md#text-based-format&#34;&gt;Prometheus文本格式&lt;/a&gt;的单个原始样本的示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requests_total&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;path=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; code=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4567890&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;requests_total{path=&amp;quot;/&amp;quot;, code=&amp;quot;200&amp;quot;}&lt;/code&gt; 用于标识给定样本的相关 timeseries。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;123&lt;/code&gt; 是一个样本值。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;4567890&lt;/code&gt; 是可选的样本时间戳。如果缺失，则数据被存储到VictoriaMetrics中时使用数据库的当前时间戳。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;timeseries-resolution时间序列粒度&#34;&gt;Timeseries resolution（时间序列粒度）&lt;/h2&gt;&#xA;&lt;p&gt;分辨率是 &lt;a href=&#34;#zZt47&#34;&gt;timeseries&lt;/a&gt; 的 &lt;a href=&#34;#WZ9Ad&#34;&gt;samples&lt;/a&gt; 之间的最小间隔。考虑以下示例：&lt;/p&gt;</description>
    </item>
    <item>
      <title>汇总（Rollup）</title>
      <link>http://localhost:1313/docs/query/metricsql/functions/rollup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/metricsql/functions/rollup/</guid>
      <description>&lt;h2 id=&#34;什么是rollup&#34;&gt;什么是Rollup&lt;/h2&gt;&#xA;&lt;p&gt;Rollup函数（也称为范围函数或窗口函数）在所选 timeseries 的给定回溯窗口上对原始样本的汇总计算。例如，&lt;code&gt;avg_over_time(temperature[24h])&lt;/code&gt;计算过去 24 小时内所有原始样本的平均温度值。&lt;/p&gt;&#xA;&lt;p&gt;更多细节：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果在Grafana中使用&lt;code&gt;rollup&lt;/code&gt;函数来构建图形，那么每个点上的&lt;code&gt;rollup&lt;/code&gt;都是独立计算的。例如，&lt;code&gt;avg_over_time(temperature[24h])&lt;/code&gt;图表中的每个点显示了截止到该时间点的过去24小时内的平均温度。点之间的间隔由Grafana传递给&lt;code&gt;/api/v1/query_range&lt;/code&gt;接口作为&lt;code&gt;step&lt;/code&gt;查询参数设置。&lt;/li&gt;&#xA;&lt;li&gt;如果给定的查询语句返回多个 timeseries，则每个返回的序列都会单独计算汇总。&lt;/li&gt;&#xA;&lt;li&gt;如果方括号中的回溯窗口缺失，则MetricsQL会自动将回溯窗口设置为图表上点之间的间隔（即&lt;code&gt;/api/v1/query_range&lt;/code&gt;中的&lt;code&gt;step&lt;/code&gt;查询参数，Grafana中的&lt;code&gt;$__interval&lt;/code&gt;值或MetricsQL中的&lt;code&gt;1i&lt;/code&gt;持续时间）。例如，&lt;code&gt;rate(http_requests_total)&lt;/code&gt;在Grafana中等同于&lt;code&gt;rate(http_requests_total[$__interval])&lt;/code&gt;。它也等同于&lt;code&gt;rate(http_requests_total[1i])&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;每个在MetricsQL中的系列选择器都必须包装在一个rollup函数中。否则，它会自动被包装成&lt;code&gt;default_rollup&lt;/code&gt;。例如，&lt;code&gt;foo{bar=&amp;quot;baz&amp;quot;}&lt;/code&gt; 在执行计算之前会自动转换为 &lt;code&gt;default_rollup(foo{bar=&amp;quot;baz&amp;quot;}[1i])&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;如果在rollup函数中传递的参数不是series selector，那么内部的参数会自动转换为&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/shu-ju-cha-xun/metricql/zi-cha-xun&#34;&gt;子查询&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;所有的汇总函数都接受可选的 &lt;code&gt;keep_metric_names&lt;/code&gt; 修饰符。如果设置了该修饰符，函数将在结果中保留指标名称。请参阅&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#keep_metric_names&#34;&gt;这些文档&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;更多参见&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#implicit-query-conversions&#34;&gt;隐式查询转换&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;与-prometheus-的普遍差异&#34;&gt;与 Prometheus 的普遍差异&lt;/h2&gt;&#xA;&lt;p&gt;凡是涉及对回溯窗口样本值首尾样本值进行计算的 rollup 函数，比如 &lt;code&gt;rate&lt;/code&gt;、&lt;code&gt;delta&lt;/code&gt;、&lt;code&gt;increase&lt;/code&gt; 等函数；其MetricsQL 和 PromQL 都存在统一的计算差异。因此 VictoriaMetrics 使用 &lt;code&gt;xxx_prometheus&lt;/code&gt; 的命名提供了兼容 Prometheus 统计方式的 rollup 函数，如 &lt;code&gt;rate_prometheus&lt;/code&gt;、&lt;code&gt;delta_prometheus&lt;/code&gt;、&lt;code&gt;increase_prometheus&lt;/code&gt; 等。而默认则使用 MetricsQL 的统计方式。&lt;/p&gt;&#xA;&lt;p&gt;具体的差异细节请阅读&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/qwvgrmtpg77a33a7&#34;&gt;这篇文档&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;函数列表&#34;&gt;函数列表&lt;/h2&gt;&#xA;&lt;h3 id=&#34;absent_over_time&#34;&gt;absent_over_time&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;absent_over_time(series_selector[d])&lt;/code&gt;是一个 rollup 函数，如果给定的向前窗口&lt;code&gt;d&lt;/code&gt;不包含原始样本，则返回1。否则，它将返回一个空结果。&lt;/p&gt;&#xA;&lt;p&gt;这个函数在PromQL中得到支持。另请参阅&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#present_over_time&#34;&gt;present_over_time&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;aggr_over_time&#34;&gt;aggr_over_time&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;aggr_over_time((&amp;quot;rollup_func1&amp;quot;, &amp;quot;rollup_func2&amp;quot;, ...), series_selector[d])&lt;/code&gt; 计算给定回溯窗口 &lt;code&gt;d&lt;/code&gt; 上所有列出的 &lt;code&gt;rollup_func* &lt;/code&gt;对原始样本进行汇总。根据给定的series_selector，对每个返回的时间序列进行单独计算。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;rollup_func*&lt;/code&gt; 可以是任意一个 rollup 函数。比如，&lt;code&gt;aggr_over_time((&amp;quot;min_over_time&amp;quot;, &amp;quot;max_over_time&amp;quot;, &amp;quot;rate&amp;quot;), m[d])&lt;/code&gt; 就会对&lt;code&gt;m[d]&lt;/code&gt;计算 &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#min_over_time&#34;&gt;min_over_time&lt;/a&gt;, &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#max_over_time&#34;&gt;max_over_time&lt;/a&gt; 和 &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#rate&#34;&gt;rate&lt;/a&gt; 。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ascent_over_time&#34;&gt;ascent_over_time&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;ascent_over_time(series_selector[d])&lt;/code&gt; 计算给定时间窗口d上原始样本值的上升。针对&lt;a href=&#34;https://docs.victoriametrics.com/keyConcepts.html#filtering&#34;&gt;series_selector&lt;/a&gt;查询返回的每个时间序列单独执行计算。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何对集群版进行扩缩容</title>
      <link>http://localhost:1313/docs/ops/cluster-resize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/ops/cluster-resize/</guid>
      <description></description>
    </item>
    <item>
      <title>快速开始</title>
      <link>http://localhost:1313/docs/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/quickstart/</guid>
      <description>&lt;h2 id=&#34;如何安装&#34;&gt;如何安装&lt;/h2&gt;&#xA;&lt;p&gt;VictoriaMetrics 有 2 种发布形式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/nusk0evr8ycpcu1t&#34;&gt;单机版本&lt;/a&gt; - ALL-IN-ONE 的二进制形式，非常易于使用和维护。可完美地垂直扩展，并且轻松处理百万级的QPS写入。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/viy5b75mqwwrdic1&#34;&gt;集群版本&lt;/a&gt; - 一套组件，可用于构建水平可扩展集群。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;单机版的 VictoriaMetrics 有以下几种提供方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/marketplace/pp/prodview-4tbfq5icmbmyc&#34;&gt;Managed VictoriaMetrics at AWS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/victoriametrics/victoria-metrics/&#34;&gt;Docker&lt;/a&gt; 镜像&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://snapcraft.io/victoriametrics&#34;&gt;Snap packages&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/helm-charts#list-of-charts&#34;&gt;Helm Charts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/releases&#34;&gt;二进制&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;源代码&lt;/a&gt;。 参见&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/dan-ji-ban-ben#how-to-build-from-sources&#34;&gt;如何构建源代码&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.linode.com/marketplace/apps/victoriametrics/victoriametrics/&#34;&gt;VictoriaMetrics on Linode&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/victoriametrics-single&#34;&gt;VictoriaMetrics on DigitalOcean&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;只需要下载 VictoriaMetrics 然后跟随&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/nusk0evr8ycpcu1t#F6gyu&#34;&gt;这些步骤&lt;/a&gt;把 VictoriaMetrics 运行起来，然后再阅读 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/dan-ji-ban-ben#prometheus-setup&#34;&gt;Prometheus&lt;/a&gt; 和 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/dan-ji-ban-ben#grafana-setup&#34;&gt;Grafana 配置&lt;/a&gt;文档。&lt;/p&gt;&#xA;&lt;h3 id=&#34;使用-docker-启动单机版vm&#34;&gt;使用 Docker 启动单机版VM&lt;/h3&gt;&#xA;&lt;p&gt;使用下面的命令下载最新版本的 VictoriaMetrics Docker 镜像，然后使用 8482 端口运行，并将数据存储在当前目录中的 &lt;code&gt;victoria-metrics-data&lt;/code&gt; 目录下。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull victoriametrics/victoria-metrics:latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm -v &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/victoria-metrics-data:/victoria-metrics-data -p 8428:8428 victoriametrics/victoria-metrics:latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用浏览器打开 &lt;a href=&#34;http://localhost:8428/&#34;&gt;http://localhost:8428&lt;/a&gt; 然后阅读&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/dan-ji-ban-ben#operation&#34;&gt;这些文档&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;使用-docker-启动集群版vm&#34;&gt;使用 Docker 启动集群版VM&lt;/h3&gt;&#xA;&lt;p&gt;下面的命令 clone 最新版本的 VictoriaMetrics 仓库，然后使用命令&lt;code&gt;make docker-cluster-up&lt;/code&gt;启动 Docker 容器。更多的自定义启动项可以通过编辑&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/deployment/docker/docker-compose-cluster.yml&#34;&gt;docker-compose-cluster.yml&lt;/a&gt;实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作 Label</title>
      <link>http://localhost:1313/docs/query/metricsql/functions/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/metricsql/functions/label/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Label 操作函数对选定的 Rollup 计算结果进行 Label 转换。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;附加细节：&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;如果 Label 操作函数直接应用于&lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:rgb(34, 34, 34);&amp;quot;&amp;gt;series_selector&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;，那么在执行 Label 转换之前，会自动应用&lt;!-- raw HTML omitted --&gt;&lt;code&gt;[default_rollup](https://docs.victoriametrics.com/metricsql/#default_rollup)&amp;lt;font style=&amp;quot;color:rgb(34, 34, 34);&amp;quot;&amp;gt;()&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;函数。例如，&lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:rgb(34, 34, 34);&amp;quot;&amp;gt;alias(temperature, &amp;quot;foo&amp;quot;)&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;!-- raw HTML omitted --&gt; 会被隐式转换为 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;font style=&amp;quot;color:rgb(34, 34, 34);&amp;quot;&amp;gt;alias(default_rollup(temperature), &amp;quot;foo&amp;quot;)&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;请参阅&lt;!-- raw HTML omitted --&gt;[隐式查询转换](implicit query conversions)&lt;!-- raw HTML omitted --&gt;。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>PromQL 新手入门</title>
      <link>http://localhost:1313/docs/query/metricsql/promql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/metricsql/promql/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34;&gt;PromQL&lt;/a&gt; 是 &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; 系统的查询语言。它是为绘图、告警或派生 Timeseries（通过 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/&#34;&gt;recording rules&lt;/a&gt;） 场景而设计的强大且简单的语言。PromQL 是从零开始设计的，与其他在时间序列数据库中使用的查询语言（比如 &lt;a href=&#34;https://www.timescale.com/&#34;&gt;TimescaleDB 的 SQ&lt;/a&gt;L，&lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.7/query_language/&#34;&gt;InfluxQL&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/influxdata/flux&#34;&gt;Flux&lt;/a&gt;）没有任何共同之处。&lt;/p&gt;&#xA;&lt;p&gt;这样做可以为典型的 TSDB 查询创建一个清晰的语言。但是它也有代价 - 初学者通常需要花费几个小时阅读官方的&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34;&gt;PromQL文档&lt;/a&gt;，才能理解其工作原理。让我们简化和缩短 PromQL 的学习曲线。&lt;/p&gt;&#xA;&lt;h2 id=&#34;查询一个-timeseries&#34;&gt;查询一个 Timeseries&lt;/h2&gt;&#xA;&lt;p&gt;选择使用 PromQL 查询 Timeseries 就像在查询中写入一个时间序列名称一样简单。例如，下面的查询将返回所有名称为&lt;code&gt;node_network_receive_bytes_total&lt;/code&gt;的 timeseries：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;node_network_receive_bytes_total&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个名称源自于&lt;a href=&#34;https://github.com/prometheus/node_exporter&#34;&gt;node_exporter指标&lt;/a&gt;，它包含了在各种网络接口上接收的字节数。这样一个简单的查询可能会返回具有相同名称但带有不同 Label Set 的多个 Timeseries。例如，上面的查询可能会返回以下 &lt;code&gt;device&lt;/code&gt; Label 等于&lt;code&gt;eth0&lt;/code&gt;、&lt;code&gt;eth1&lt;/code&gt;和&lt;code&gt;eth2&lt;/code&gt;的 Timeseries：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;node_network_receive_bytes_total{device=&amp;#34;eth0&amp;#34;}&#xA;node_network_receive_bytes_total{device=&amp;#34;eth1&amp;#34;}&#xA;node_network_receive_bytes_total{device=&amp;#34;eth2&amp;#34;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不通的Label被放在了花括号中：&lt;code&gt;{device=&amp;quot;eth0&amp;quot;}&lt;/code&gt;, &lt;code&gt;{device=&amp;quot;eth1&amp;quot;}&lt;/code&gt;, &lt;code&gt;{device=&amp;quot;eth2&amp;quot;}&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;让我们来看下 TimescaleDB 的 SQL 来达到同样的效果：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plsql&#34; data-lang=&#34;plsql&#34;&gt;SELECT&#xA;  ts.metric_name_plus_tags,&#xA;  r.timestamps,&#xA;  r.values&#xA;FROM (&#xA;  (SELECT&#xA;   time_series_id,&#xA;   array_agg(timestamp ORDER BY timestamp) AS timestamps,&#xA;   array_agg(value ORDER BY timestamp) AS values&#xA;   FROM&#xA;   metrics&#xA;   WHERE&#xA;   time_series_id IN (&#xA;     SELECT id FROM time_series&#xA;     WHERE metric_name = &amp;#39;node_network_receive_bytes_total&amp;#39;&#xA;   )&#xA;   GROUP BY&#xA;   time_series_id&#xA;  )&#xA;) AS r JOIN time_series AS ts ON (r.time_series_id = ts.id)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对比下来是不是觉得很简单。SQL 不得不写得更加复杂，才能与上述的PromQL查询结果相媲美。因为 SQL 不会自带时间范围和降采样机制，但这些都会被 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries&#34;&gt;PromQL 的 /query_range&lt;/a&gt; 接口 使用&lt;code&gt;start&lt;/code&gt;，&lt;code&gt;end&lt;/code&gt;和&lt;code&gt;step&lt;/code&gt;参数自动完成。&lt;/p&gt;</description>
    </item>
    <item>
      <title>单机版本</title>
      <link>http://localhost:1313/docs/single/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/single/</guid>
      <description>&lt;h2 id=&#34;安装部署&#34;&gt;安装部署&lt;/h2&gt;&#xA;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;&#xA;&lt;p&gt;要快速尝试VictoriaMetrics，只需下载&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/releases&#34;&gt;VictoriaMetrics可执行文件&lt;/a&gt;或&lt;a href=&#34;https://hub.docker.com/r/victoriametrics/victoria-metrics/&#34;&gt;Docker镜像&lt;/a&gt;，并使用所需的运行参数启动它。还可以参考&lt;a href=&#34;http://localhost:1313/docs/quickstart/&#34;&gt;快速开始&lt;/a&gt;指南获取更多信息。&lt;/p&gt;&#xA;&lt;p&gt;此外，也可以通过以下方法来安装VictoriaMetrics：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/helm-charts&#34;&gt;Helm charts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/operator&#34;&gt;Kubernetes operator&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/ansible-playbooks&#34;&gt;安装集群版本的 Ansible Role（官方）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Slapper/ansible-victoriametrics-cluster-role&#34;&gt;安装集群版本的 Ansible Role（社区）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/dreamteam-gg/ansible-victoriametrics-role&#34;&gt;安装单机版的 Ansible Role（社区）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://snapcraft.io/victoriametrics&#34;&gt;Snap package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;运行&#34;&gt;运行&lt;/h3&gt;&#xA;&lt;p&gt;下面的几个运行参数是最常用的：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-storageDataPath&lt;/code&gt;：VictoriaMetrics 把所有的数据都保存在这个目录。默认的路径是当前工作目录中的&lt;code&gt;victoria-metrics-data&lt;/code&gt; 子目录。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-retentionPeriod&lt;/code&gt;：数据的保留时间。历史的数据会被自动清理删除。默认的保留时间是 1 个月。最小的保留时间是 1 天（即 24 小时）。&lt;a href=&#34;#deduplication&#34;&gt;点击了解更多详情&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;其他的运行参数，基本使用默认值就可以了，所以只有在有特殊需求的时候再修改他们就行。用&lt;code&gt;-help&lt;/code&gt; 参数看下&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#list-of-command-line-flags&#34;&gt;所有可用参数及他们描述和默认值&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;正因 VictoriaMetrics 的配置参数都是通过命令行传递的，所以它不支持动态修改配置。如果要修改配置就只能用新的命令行对 VictoriaMetrics 进行重启。步骤如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;向VictoriaMetrics进程发送&lt;code&gt;SIGINT&lt;/code&gt;信号以正常停止它。请参阅&lt;a href=&#34;https://stackoverflow.com/questions/33239959/send-signal-to-process-from-command-line&#34;&gt;如何向进程发送信号&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;等待进程停止。这可能需要几秒钟时间。&lt;/li&gt;&#xA;&lt;li&gt;启动已升级的VictoriaMetrics。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;下面的几个文档，对初始化 VictoriaMetrics 可能会有些帮助：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-scrape-prometheus-exporters-such-as-node-exporter&#34;&gt;How to set up scraping of Prometheus-compatible targets&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-import-time-series-data&#34;&gt;How to ingest data to VictoriaMetrics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#prometheus-setup&#34;&gt;How to set up Prometheus to write data to VictoriaMetrics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#grafana-setup&#34;&gt;How to query VictoriaMetrics via Grafana&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#graphite-api-usage&#34;&gt;How to query VictoriaMetrics via Graphite API&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#alerting&#34;&gt;How to handle alerts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;VictoriaMetrics 默认使用 8428 端口处理 &lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#prometheus-querying-api-usage&#34;&gt;Prometheus 查询请求&lt;/a&gt;。建议为 VictoriaMetrics 搭建&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/dan-ji-ban-ben#jian-kong&#34;&gt;监控&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何处理机器故障</title>
      <link>http://localhost:1313/docs/ops/node-crash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/ops/node-crash/</guid>
      <description></description>
    </item>
    <item>
      <title>对比PromQL</title>
      <link>http://localhost:1313/docs/query/metricsql/promql-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/metricsql/promql-diff/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html&#34;&gt;MetricsQL&lt;/a&gt; is a query language inspired by &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34;&gt;PromQL&lt;/a&gt;. It is used as a primary query language in &lt;a href=&#34;https://github.com/victoriaMetrics/victoriaMetrics&#34;&gt;VictoriaMetrics&lt;/a&gt;, time series database and monitoring solution. MetricsQL claims to be backward-compatible with PromQL, so Grafana dashboards backed by a Prometheus datasource should work the same after switching from Prometheus to VictoriaMetrics.&lt;/p&gt;&#xA;&lt;p&gt;However, VictoriaMetrics is not 100% compatible with PromQL and never will be. Please read on and we will discuss why that is.&lt;/p&gt;&#xA;&lt;p&gt;For a long time, there was no way to measure compatibility with PromQL. There was not even a fully defined &lt;a href=&#34;https://promlabs.com/blog/2020/08/06/comparing-promql-correctness-across-vendors#what-is-correct-in-the-absence-of-a-specification&#34;&gt;PromQL specification&lt;/a&gt;. But, some time ago, the &lt;a href=&#34;https://prometheus.io/blog/2021/05/03/introducing-prometheus-conformance-program/&#34;&gt;Prometheus Conformance Program&lt;/a&gt; was announced with the aim to certify software with a mark of compatibility with Prometheus — “Upon reaching 100%, the mark will be granted&amp;quot;. The open-source tool, &lt;a href=&#34;https://github.com/prometheus/compliance&#34;&gt;prometheus/compliance&lt;/a&gt; was created to check for compatibility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>聚合统计</title>
      <link>http://localhost:1313/docs/query/metricsql/functions/aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/metricsql/functions/aggregation/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Aggregate functions&lt;/strong&gt; calculate aggregates over groups of &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#rollup-functions&#34;&gt;rollup results&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Additional details:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;By default, a single group is used for aggregation. Multiple independent groups can be set up by specifying grouping labels in &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;without&lt;/code&gt; modifiers. For example, &lt;code&gt;count(up) by (job)&lt;/code&gt; would group &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#rollup-functions&#34;&gt;rollup results&lt;/a&gt; by &lt;code&gt;job&lt;/code&gt; label value and calculate the &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#count&#34;&gt;count&lt;/a&gt; aggregate function independently per each group, while &lt;code&gt;count(up) without (instance)&lt;/code&gt; would group &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#rollup-functions&#34;&gt;rollup results&lt;/a&gt; by all the labels except &lt;code&gt;instance&lt;/code&gt; before calculating &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#count&#34;&gt;count&lt;/a&gt; aggregate function independently per each group. Multiple labels can be put in &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;without&lt;/code&gt; modifiers.&lt;/li&gt;&#xA;&lt;li&gt;If the aggregate function is applied directly to a &lt;a href=&#34;https://docs.victoriametrics.com/keyconcepts/#filtering&#34;&gt;series_selector&lt;/a&gt;, then the &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#default_rollup&#34;&gt;default_rollup()&lt;/a&gt; function is automatically applied before calculating the aggregate. For example, &lt;code&gt;count(up)&lt;/code&gt; is implicitly transformed to &lt;code&gt;count(default_rollup(up))&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Aggregate functions accept arbitrary number of args. For example, &lt;code&gt;avg(q1, q2, q3)&lt;/code&gt; would return the average values for every point across time series returned by &lt;code&gt;q1&lt;/code&gt;, &lt;code&gt;q2&lt;/code&gt; and &lt;code&gt;q3&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Aggregate functions support optional &lt;code&gt;limit N&lt;/code&gt; suffix, which can be used for limiting the number of output groups. For example, &lt;code&gt;sum(x) by (y) limit 3&lt;/code&gt; limits the number of groups for the aggregation to 3. All the other groups are ignored.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;See also &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#implicit-query-conversions&#34;&gt;implicit query conversions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何补写历史数据</title>
      <link>http://localhost:1313/docs/ops/write-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/ops/write-history/</guid>
      <description></description>
    </item>
    <item>
      <title>数值转换</title>
      <link>http://localhost:1313/docs/query/metricsql/functions/transmit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/metricsql/functions/transmit/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Transform functions&lt;/strong&gt; calculate transformations over &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#rollup-functions&#34;&gt;rollup results&lt;/a&gt;. For example, &lt;code&gt;abs(delta(temperature[24h]))&lt;/code&gt; calculates the absolute value for every point of every time series returned from the rollup &lt;code&gt;delta(temperature[24h])&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Additional details:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If transform function is applied directly to a &lt;a href=&#34;https://docs.victoriametrics.com/keyconcepts/#filtering&#34;&gt;series selector&lt;/a&gt;, then the &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#default_rollup&#34;&gt;default_rollup()&lt;/a&gt; function is automatically applied before calculating the transformations. For example, &lt;code&gt;abs(temperature)&lt;/code&gt; is implicitly transformed to &lt;code&gt;abs(default_rollup(temperature))&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;All the transform functions accept optional &lt;code&gt;keep_metric_names&lt;/code&gt; modifier. If it is set, then the function doesn’t drop metric names from the resulting time series. See &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#keep_metric_names&#34;&gt;these docs&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;See also &lt;a href=&#34;https://docs.victoriametrics.com/metricsql/#implicit-query-conversions&#34;&gt;implicit query conversions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>集群版本</title>
      <link>http://localhost:1313/docs/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/cluster/</guid>
      <description>&lt;h2 id=&#34;架构概览&#34;&gt;架构概览&lt;/h2&gt;&#xA;&lt;p&gt;VictoriaMetrics 集群版本由以下几个服务组成：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;vmstorage&lt;/code&gt; - 存储原始数据，并返回在给定时间范围内针对给定 Label 筛选器查询的数据。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;vminsert&lt;/code&gt; - 接受摄入的数据，并 根据对度量名称及其所有标签的一致散列，将数据分散到 &lt;code&gt;vmstorage&lt;/code&gt; 节点中&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;vmselect&lt;/code&gt; - 通过从所有已配置的 &lt;code&gt;vmstorage&lt;/code&gt; 节点获取所需数据来执行接收到的查询请求。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;每项服务都可独立扩展，并可在最合适的硬件上运行。 &lt;code&gt;vmstorage&lt;/code&gt; 节点之间互不相识，互不通信，也不共享任何数据。 这是一种&lt;a href=&#34;https://en.wikipedia.org/wiki/Shared-nothing_architecture&#34;&gt;共享无架构&lt;/a&gt; 。 它提高了集群的可用性，简化了集群维护和集群扩展。&lt;/p&gt;&#xA;&lt;h2 id=&#34;多租户&#34;&gt;多租户&lt;/h2&gt;&#xA;&lt;p&gt;VictoriaMetrics集群支持多个隔离的租户（即命名空间）。租户通过accountID或accountID:projectID进行标识，这些标识符被置于请求URL中。详情请参阅&lt;a href=&#34;https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#url-format&#34;&gt;这些文档&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;关于VictoriaMetrics中租户的一些事实：&lt;/p&gt;&#xA;&lt;p&gt;每个accountID和projectID均由一个任意的32位整数标识，范围为&lt;code&gt;[0..2^32)&lt;/code&gt;。如果projectID缺失，则自动分配为0。预期其他关于租户的信息，如身份验证令牌、租户名称、限制、会计等，存储在一个独立的关系数据库中。该数据库必须由位于VictoriaMetrics集群前端的独立服务进行管理，例如&lt;a href=&#34;https://docs.victoriametrics.com/vmauth.html&#34;&gt;vmauth&lt;/a&gt;或&lt;a href=&#34;https://docs.victoriametrics.com/vmgateway.html&#34;&gt;vmgateway&lt;/a&gt;。如果您需要此类服务的协助，请联系我们。&lt;/p&gt;&#xA;&lt;p&gt;当第一个数据点被写入给定的租户时，租户会被自动创建。&lt;/p&gt;&#xA;&lt;p&gt;所有租户的数据均匀分布在可用的&lt;code&gt;vmstorage&lt;/code&gt;节点之间。这保证了当不同租户拥有不同数量的数据和不同的查询负载时，&lt;code&gt;vmstorage&lt;/code&gt;节点之间的负载也是均匀的。&lt;/p&gt;&#xA;&lt;p&gt;数据库的性能和资源使用情况并不取决于租户的数量，而主要取决于所有租户中活跃时间序列的总数。如果一个时间序列在过去的一小时中至少接收了一个样本，或者在过去的一小时中被查询访问过，那么它就被认为是活跃的。&lt;/p&gt;&#xA;&lt;p&gt;VictoriaMetrics不支持在单一请求中查询多个租户。&lt;/p&gt;&#xA;&lt;p&gt;已注册租户的列表可以通过&lt;code&gt;http://&amp;lt;vmselect&amp;gt;:8481/admin/tenants&lt;/code&gt; URL获取。请参阅&lt;a href=&#34;https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#url-format&#34;&gt;这些文档&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;VictoriaMetrics通过指标公开了各种按租户划分的统计数据——请参阅&lt;a href=&#34;https://docs.victoriametrics.com/PerTenantStatistic.html&#34;&gt;这些文档&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;也可以看下&lt;a href=&#34;https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#multitenancy-via-labels&#34;&gt;通过 labels 实现多租户&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;通过-labels-实现多租户&#34;&gt;通过 labels 实现多租户&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;vminsert&lt;/code&gt;可以从多个租户通过一个特殊的&lt;a href=&#34;https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#multitenancy&#34;&gt;多租户&lt;/a&gt;端点&lt;code&gt;http://vminsert:8480/insert/multitenant/&amp;lt;suffix&amp;gt;&lt;/code&gt;接收数据，其中可以替换为从此列表中获取数据的任何受支持的&lt;code&gt;&amp;lt;suffix&amp;gt;&lt;/code&gt;。在这种情况下，AccountID 和ProjectID是从传入样本的可选 &lt;code&gt;vm_account_id&lt;/code&gt; 和 &lt;code&gt;vm_project_id&lt;/code&gt; 标签中获取的。如果 vm_account_id 或 vm_project_id 标签缺失或无效，则相应的AccountID 或ProjectID 将设置为 0。在将样本转发到&lt;code&gt;vmstorage&lt;/code&gt;之前，会自动从样本中删除这些Label。例如，如果将以下样本写入 &lt;code&gt;http://vminsert:8480/insert/multitenant/prometheus/api/v1/write&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http_requests_total{path=&amp;#34;/foo&amp;#34;,vm_account_id=&amp;#34;42&amp;#34;} 12&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http_requests_total{path=&amp;#34;/bar&amp;#34;,vm_account_id=&amp;#34;7&amp;#34;,vm_project_id=&amp;#34;9&amp;#34;} 34&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后&lt;code&gt;http_requests_total｛path=“/foo”｝12&lt;/code&gt;将被存储在租户&lt;code&gt;accountID=42，projectID=0&lt;/code&gt;中，而&lt;code&gt;http_requests_total{path=“/bar”｝34&lt;/code&gt;将被存储到租户&lt;code&gt;accountID=7，projectID=9&lt;/code&gt;中。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;vm_account_id&lt;/code&gt;和&lt;code&gt;vm_project_id&lt;/code&gt; labels 是在通过&lt;code&gt;-rebelConfig&lt;/code&gt;命令行标志应用 &lt;a href=&#34;https://docs.victoriametrics.com/relabeling.html&#34;&gt;relabeling&lt;/a&gt; 集后提取的，因此可以在此阶段设置这些 label。&lt;/p&gt;&#xA;&lt;p&gt;安全提示：建议将对多租户端点的访问限制为仅限可信源，因为不可信源可能会通过向任意租户写入不需要的样本来破坏每个租户的数据。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二进制&#34;&gt;二进制&lt;/h2&gt;&#xA;&lt;p&gt;集群版本的编译二进制文件可在&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/releases&#34;&gt;发布页面&lt;/a&gt;的 assets 部分中找到。另请参阅包含单词“集群”的档案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTP 查询接口</title>
      <link>http://localhost:1313/docs/query/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/query/http/</guid>
      <description>&lt;h2 id=&#34;单机版&#34;&gt;单机版&lt;/h2&gt;&#xA;&lt;h3 id=&#34;prometheus-查询接口&#34;&gt;Prometheus 查询接口&lt;/h3&gt;&#xA;&lt;p&gt;VictoriaMetrics 支持下面这些 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/&#34;&gt;Prometheus 查询 API&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/keyConcepts.html#instant-query&#34;&gt;/api/v1/query&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/keyConcepts.html#range-query&#34;&gt;/api/v1/query_range&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/#finding-series-by-label-matchers&#34;&gt;/api/v1/series&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/#getting-label-names&#34;&gt;/api/v1/labels&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/#querying-label-values&#34;&gt;/api/v1/label/…/values&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-stats&#34;&gt;/api/v1/status/tsdb&lt;/a&gt;. See &lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#tsdb-stats&#34;&gt;these docs&lt;/a&gt; for details.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/#targets&#34;&gt;/api/v1/targets&lt;/a&gt; - see &lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-scrape-prometheus-exporters-such-as-node-exporter&#34;&gt;these docs&lt;/a&gt; for more details.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/federation/&#34;&gt;/federate&lt;/a&gt; - see &lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#federation&#34;&gt;these docs&lt;/a&gt; for more details.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这些接口可以被Prometheus兼容的客户端（如Grafana或curl）查询。所有Prometheus查询API处理程序都可以使用&lt;code&gt;/prometheus&lt;/code&gt;前缀进行查询。例如，&lt;code&gt;/prometheus/api/v1/query&lt;/code&gt;和&lt;code&gt;/api/v1/query&lt;/code&gt;都可以正常工作。&lt;/p&gt;&#xA;&lt;h4 id=&#34;查询优化&#34;&gt;查询优化&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VictoriaMetrics 接受&lt;code&gt;extra_label=&amp;lt;label_name&amp;gt;=&amp;lt;label_value&amp;gt;&lt;/code&gt;查询参数（可选），可以用于强制使用额外 Label 过滤器执行查询。例如，&lt;code&gt;/api/v1/query_range?extra_label=user_id=123&amp;amp;extra_label=group_id=456&amp;amp;query=&amp;lt;query&amp;gt;&lt;/code&gt;会自动将&lt;code&gt;{user_id=&amp;quot;123&amp;quot;,group_id=&amp;quot;456&amp;quot;}&lt;/code&gt;Label 过滤器添加到给定的查询中。此功能可用于限制给定租户可见的 timeseries 范围。一般&lt;code&gt;extra_label&lt;/code&gt;查询参数由位于 VictoriaMetrics 前面的查询代理服务自动设置。例如，可以参考使用 &lt;a href=&#34;https://docs.victoriametrics.com/vmauth.html&#34;&gt;vmauth&lt;/a&gt; 和 &lt;a href=&#34;https://docs.victoriametrics.com/vmgateway.html&#34;&gt;vmgateway&lt;/a&gt; 作为查询代理的示例。&lt;/li&gt;&#xA;&lt;li&gt;VictoriaMetrics 接受&lt;code&gt;extra_filters[]=series_selector&lt;/code&gt;查询参数（可选），可用于对查询强制执行任意的 Label 过滤器。例如，&lt;code&gt;/api/v1/query_range?extra_filters[]={env=~&amp;quot;prod|staging&amp;quot;,user=&amp;quot;xyz&amp;quot;}&amp;amp;query=&amp;lt;query&amp;gt;&lt;/code&gt;将自动将&lt;code&gt;{env=~&amp;quot;prod|staging&amp;quot;,user=&amp;quot;xyz&amp;quot;}&lt;/code&gt;Label 过滤器添加到给定的查询中。此功能可用于限制给定租户可见的 timeseries 范围。我们建议在 VictoriaMetrics 前面的查询代理自动设置&lt;code&gt;extra_filters[]&lt;/code&gt;查询参数。您可以将&lt;a href=&#34;https://docs.victoriametrics.com/vmauth.html&#34;&gt;vmauth&lt;/a&gt;和&lt;a href=&#34;https://docs.victoriametrics.com/vmgateway.html&#34;&gt;vmgateway&lt;/a&gt;作为这种代理的示例。&lt;/li&gt;&#xA;&lt;li&gt;VictoriaMetrics 接受多种格式的 &lt;code&gt;time&lt;/code&gt;，&lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;end&lt;/code&gt; 查询参数，可参考&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#timestamp-formats&#34;&gt;这些文档&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;VictoriaMetrics对于&lt;a href=&#34;https://docs.victoriametrics.com/keyConcepts.html#instant-query&#34;&gt;/api/v1/query&lt;/a&gt;和&lt;a href=&#34;https://docs.victoriametrics.com/keyConcepts.html#range-query&#34;&gt;/api/v1/query_range&lt;/a&gt;接口支持&lt;code&gt;round_digits&lt;/code&gt;查询参数。它可用于指定返回的指标值的保留小数点位数。例如，&lt;code&gt;/api/v1/query?query=avg_over_time(temperature[1h])&amp;amp;round_digits=2&lt;/code&gt;会将让返回的指标值保留小数点后面 2 位。&lt;/li&gt;&#xA;&lt;li&gt;VictoriaMetrics允许在&lt;a href=&#34;https://docs.victoriametrics.com/url-examples.html#apiv1labels&#34;&gt;/api/v1/labels&lt;/a&gt;和&lt;a href=&#34;https://docs.victoriametrics.com/url-examples.html#apiv1labelvalues&#34;&gt;/api/v1/label/&lt;!-- raw HTML omitted --&gt;/values&lt;/a&gt;接口中使用&lt;code&gt;limit&lt;/code&gt;查询参数来限制返回的条目数量。例如，对&lt;code&gt;/api/v1/labels?limit=5&lt;/code&gt;的查询请求最多返回5个唯一的 Label 值，并忽略其他 Label。如果提供的&lt;code&gt;limit&lt;/code&gt;值超过了相应的&lt;code&gt;-command-line&lt;/code&gt;命令行参数&lt;code&gt;-search.maxTagKeys&lt;/code&gt;或&lt;code&gt;-search.maxTagValues&lt;/code&gt;，则会使用命令行参数中指定的限制。&lt;/li&gt;&#xA;&lt;li&gt;默认情况下，VictoriaMetrics从&lt;a href=&#34;https://docs.victoriametrics.com/url-examples.html#apiv1series&#34;&gt;/api/v1/series&lt;/a&gt;、&lt;a href=&#34;https://docs.victoriametrics.com/url-examples.html#apiv1labels&#34;&gt;/api/v1/labels&lt;/a&gt;和&lt;a href=&#34;https://docs.victoriametrics.com/url-examples.html#apiv1labelvalues&#34;&gt;/api/v1/label/&lt;!-- raw HTML omitted --&gt;/values&lt;/a&gt;返回最近一天从00:00 UTC开始的 series 数据，而Prometheus API默认返回所有时间的数据。如果要选择特定的时间范围的 series 数据，可使用 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;end&lt;/code&gt; 参数指定。由于性能优化的考虑，VictoriaMetrics会将指定的 &lt;code&gt;start..end&lt;/code&gt; 时间范围舍入到天的粒度。如果您需要在给定时间范围内获取精确的 Label 集合，请将查询发送到&lt;a href=&#34;https://docs.victoriametrics.com/keyConcepts.html#instant-query&#34;&gt;/api/v1/query&lt;/a&gt;或&lt;a href=&#34;https://docs.victoriametrics.com/keyConcepts.html#range-query&#34;&gt;/api/v1/query_range&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;VictoriaMetrics在&lt;a href=&#34;https://docs.victoriametrics.com/url-examples.html#apiv1series&#34;&gt;/api/v1/series&lt;/a&gt;中接受&lt;code&gt;limit&lt;/code&gt;查询参数，用于限制返回的条目数量。例如，对&lt;code&gt;/api/v1/series?limit=5&lt;/code&gt;的查询将最多返回5个 series，并忽略其余的时间序列。如果提供的&lt;code&gt;limit&lt;/code&gt;值超过了相应的命令行参数&lt;code&gt;-search.maxSeries&lt;/code&gt;的值，则会使用命令行中指定的限制。&lt;/li&gt;&#xA;&lt;li&gt;此外，VictoriaMetrics还提供了以下接口：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;/vmui&lt;/code&gt; - 基本的 Web UI 界面，阅读&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#vmui&#34;&gt;这些文档&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/api/v1/series/count&lt;/code&gt; - 返回数据库中 time series 的总数量。注意：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该接口扫描了整个数据库的倒排索引，所以如果数据库包含数千万个 series 时间序列，它可能会变慢。&lt;/li&gt;&#xA;&lt;li&gt;该接口可能把&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-delete-time-series&#34;&gt;删除 time series&lt;/a&gt; 计算在内，这是内部实现导致的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/api/v1/status/active_queries&lt;/code&gt; - 返回当前正在执行的查询。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/api/v1/status/top_queries&lt;/code&gt; - 返回下面几个查询列表:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;执行最频繁的查询列表 - &lt;code&gt;topByCount&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;平均执行时间最长的查询列表 - &lt;code&gt;topByAvgDuration&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;执行时间最长的查询列表 - &lt;code&gt;topBySumDuration&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;返回的查询个数可以使用 &lt;code&gt;topN&lt;/code&gt; 参数进行限制。历史查询可以使用 &lt;code&gt;maxLifetime&lt;/code&gt; 参数过滤掉。比如，请求&lt;code&gt;/api/v1/status/top_queries?topN=5&amp;amp;maxLifetime=30s&lt;/code&gt;返回最近 30 秒内每个类型的 Top5 个查询列表。VictoriaMetrics 会跟踪统计最近&lt;code&gt;-s earch.queryStats.lastQueriesCount&lt;/code&gt;时间内，且执行时间大于&lt;code&gt;search.queryStats.minQueryDuration&lt;/code&gt;的查询。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;timestamp-格式&#34;&gt;Timestamp 格式&lt;/h4&gt;&#xA;&lt;p&gt;VictoriaMetrics 接受下面这些格式的 &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; 参数， 在 &lt;a href=&#34;https://docs.victoriametrics.com/#prometheus-querying-api-usage&#34;&gt;query APIs&lt;/a&gt; 和 &lt;a href=&#34;https://docs.victoriametrics.com/#how-to-export-time-series&#34;&gt;export APIs&lt;/a&gt; 中皆是如此。&lt;/p&gt;</description>
    </item>
    <item>
      <title>有效利用一机多盘</title>
      <link>http://localhost:1313/docs/ops/multi-disk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/ops/multi-disk/</guid>
      <description></description>
    </item>
    <item>
      <title>数据写入</title>
      <link>http://localhost:1313/docs/write/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/write/</guid>
      <description>&lt;p&gt;VictoriaMetrics 支持当今监控应用的 2 种主流写入模式：Push 和 Pull。&lt;/p&gt;&#xA;&lt;h2 id=&#34;push-模型&#34;&gt;Push 模型&lt;/h2&gt;&#xA;&lt;p&gt;客户端定期以推送模式将收集到的指标数据发送给服务端：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;push-model.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;客户端（应用程序）决定何时何地发送其指标。VictoriaMetrics支持以下数据摄取协议（也称为推送协议）：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#prometheus-setup&#34;&gt;Prometheus remote write API&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-import-data-in-prometheus-exposition-format&#34;&gt;Prometheus text exposition format&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-send-data-from-datadog-agent&#34;&gt;DataDog protocol&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-send-data-from-influxdb-compatible-agents-such-as-telegraf&#34;&gt;InfluxDB line protocol&lt;/a&gt; over HTTP, TCP and UDP.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-send-data-from-graphite-compatible-agents-such-as-statsd&#34;&gt;Graphite plaintext protocol&lt;/a&gt; with &lt;a href=&#34;https://graphite.readthedocs.io/en/latest/tags.html#carbon&#34;&gt;tags&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#sending-data-via-telnet-put-protocol&#34;&gt;OpenTSDB put message&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#sending-opentsdb-data-via-http-apiput-requests&#34;&gt;HTTP OpenTSDB /api/put requests&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-import-data-in-json-line-format&#34;&gt;JSON line format&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#how-to-import-csv-data&#34;&gt;Arbitrary CSV data&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所有协议都与VictoriaMetrics&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/he-xin-gai-nian&#34;&gt;数据模型&lt;/a&gt;完全兼容，可以在生产环境中使用。我们建议使用&lt;a href=&#34;https://github.com/VictoriaMetrics/metrics&#34;&gt;github.com/VictoriaMetrics/metrics&lt;/a&gt;包将应用程序指标推送到VictoriaMetrics。还可以使用已经存在的与上述协议兼容的客户端，例如&lt;code&gt;Telegraf&lt;/code&gt;用的 InfluxDB line protocol。&lt;/p&gt;&#xA;&lt;p&gt;创建自定义客户端或为指标编写应用程序非常简单，只需发送一个POST请求即可：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -d &amp;#39;{&amp;#34;metric&amp;#34;:{&amp;#34;__name__&amp;#34;:&amp;#34;foo&amp;#34;,&amp;#34;job&amp;#34;:&amp;#34;node_exporter&amp;#34;},&amp;#34;values&amp;#34;:[0,1,2],&amp;#34;timestamps&amp;#34;:[1549891472010,1549891487724,1549891503438]}&amp;#39; -X POST &amp;#39;http://localhost:8428/api/v1/import&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;允许将指标推送/写入&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/dan-ji-ban-ben&#34;&gt;单机版VictoriaMetrics&lt;/a&gt;、集群组件vminsert 和 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/xi-tong-zu-jian/vmagent&#34;&gt;vmagent&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;Push 模型的优点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在VictoriaMetrics方面，配置更简单 - 无需为监控应用程序配置VictoriaMetrics的位置。不需要复杂的服务发现方案。&lt;/li&gt;&#xA;&lt;li&gt;安全设置更简单 - 无需设置从VictoriaMetrics到每个监控应用程序的访问权限。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;详细了解Percona为什么从 Pull 模式转向 Push 模式，请参阅 &lt;a href=&#34;https://www.percona.com/blog/2020/12/01/foiled-by-the-firewall-a-tale-of-transition-from-prometheus-to-victoriametrics/&#34;&gt;Foiled by the Firewall: A Tale of Transition From Prometheus to VictoriaMetrics&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FAQ</title>
      <link>http://localhost:1313/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/faq/</guid>
      <description>&lt;h2 id=&#34;什么是活跃时间序列&#34;&gt;什么是活跃时间序列?&lt;/h2&gt;&#xA;&lt;p&gt;时间序列通过其名称和一组标签来唯一标识。例如，&lt;code&gt;temperature{city=&amp;quot;NY&amp;quot;,country=&amp;quot;US&amp;quot;}&lt;/code&gt; 和 &lt;code&gt;temperature{city=&amp;quot;SF&amp;quot;,country=&amp;quot;US&amp;quot;}&lt;/code&gt; 是两个不同的序列，因为它们在城市标签上有所区别。如果一个时间序列在最近一小时内至少接收到一个新样本，则被视为活跃。&lt;/p&gt;&#xA;&lt;h2 id=&#34;高流失率是指什么&#34;&gt;高流失率是指什么？&lt;/h2&gt;&#xA;&lt;p&gt;如果旧的时间序列以高频率被新的时间序列不断替换，那么这种状态被称为高流失率。高流失率会带来以下负面影响：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据库中存储的时间序列总数增加。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;倒排索引（存储在&lt;code&gt;&amp;lt;storageDataPath&amp;gt;/indexdb&lt;/code&gt;）的大小增加，因为倒排索引包含了每个标签至少有一个摄入样本的所有时间序列的条目。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查询跨多天时变慢。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;导致高流失率的主要原因是具有频繁更改值的度量标签。以下是一些示例：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;queryid&lt;/code&gt;，在&lt;code&gt;postgres_exporter&lt;/code&gt;中每次查询都会更改。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;app_name&lt;/code&gt;或&lt;code&gt;deployment_id&lt;/code&gt;，在Kubernetes中每次部署都会更改。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;从当前时间派生出来的标签，例如&lt;code&gt;timestamp&lt;/code&gt;、&lt;code&gt;minute&lt;/code&gt;或&lt;code&gt;hour&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;经常更改的&lt;code&gt;hash&lt;/code&gt;或&lt;code&gt;uuid&lt;/code&gt;标签。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;解决高流失率问题需要识别和消除具有频繁更改值的标签。Cardinality explorer可以帮助确定这些标签。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是高基数&#34;&gt;什么是高基数&lt;/h2&gt;&#xA;&lt;p&gt;高基数通常意味着&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/faq#what-is-an-active-time-series&#34;&gt;活跃时间序列&lt;/a&gt;的数量很多。高基数可能导致内存使用量增加和/或慢速插入的比例较高。高基数的来源通常是具有大量唯一值的标签，这些标签占了被摄取时间序列的很大比例。解决方案是通过基数探索器来识别和移除高基数的来源。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是慢写入&#34;&gt;什么是慢写入&lt;/h2&gt;&#xA;&lt;p&gt;VictoriaMetrics在内存中维护了一个缓存，用于将&lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/faq#what-is-an-active-time-series&#34;&gt;活跃时间序列&lt;/a&gt;映射为内部系列ID。缓存的大小取决于主机系统中可用的VictoriaMetrics内存。如果所有活跃时间序列的信息无法适应缓存，则VictoriaMetrics需要在每个进入样本时从磁盘上读取和解压缩不在缓存中的时间序列信息。这个操作比缓存查找要慢得多，因此这种插入被称为&lt;code&gt;慢写入&lt;/code&gt;。官方仪表板上出现大量慢写入表示当前活跃时间序列数量存在内存不足问题。这种情况通常会导致数据摄取严重减慢，并显著增加磁盘IO和CPU使用率。解决方法是增加更多内存或减少活跃时间序列的数量。Cardinality Explorer可以帮助定位高数量活跃时间序列的来源。&lt;/p&gt;&#xA;&lt;h2 id=&#34;如何限制-victoriametrics-组件的内存&#34;&gt;如何限制 VictoriaMetrics 组件的内存&lt;/h2&gt;&#xA;&lt;p&gt;所有的VictoriaMetrics组件都提供了命令行参数来控制内部缓冲区和缓存的大小：&lt;code&gt;-memory.allowedPercent&lt;/code&gt; 和 &lt;code&gt;-memory.allowedBytes&lt;/code&gt;（在任何一个VictoriaMetrics组件中使用&lt;code&gt;-help &lt;/code&gt;查看这些参数的描述）。这些限制不考虑可能需要用于处理传入查询的额外内存。硬限制只能通过操作系统通过&lt;a href=&#34;https://en.wikipedia.org/wiki/Cgroups&#34;&gt;cgroups&lt;/a&gt;、&lt;a href=&#34;https://docs.docker.com/config/containers/resource_constraints&#34;&gt;Docker&lt;/a&gt;或&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/manage-resources-containers&#34;&gt;Kubernetes&lt;/a&gt;来强制执行。&lt;/p&gt;&#xA;&lt;p&gt;根据以下文档，可以调整VictoriaMetrics组件的内存使用情况：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#resource-usage-limits&#34;&gt;Resource usage limits for single-node VictoriaMetrics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#resource-usage-limits&#34;&gt;Resource usage limits for cluster VictoriaMetrics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/vmagent.html#troubleshooting&#34;&gt;Troubleshooting for vmagent&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#troubleshooting&#34;&gt;Troubleshooting for single-node VictoriaMetrics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;如何删除数据&#34;&gt;如何删除数据&lt;/h2&gt;&#xA;&lt;p&gt;请阅读 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/dan-ji-ban-ben#ru-he-shan-chu-timeseries&#34;&gt;如何删除 Timeseries&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
