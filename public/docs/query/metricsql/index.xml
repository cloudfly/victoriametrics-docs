<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中文手册 – MetricQL</title>
    <link>http://localhost:1313/docs/query/metricsql/</link>
    <description>Recent content in MetricQL on 中文手册</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2024 Cloudfly,陈云飞</copyright>
    
	  <atom:link href="http://localhost:1313/docs/query/metricsql/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>基本用法</title>
      <link>http://localhost:1313/docs/query/metricsql/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/query/metricsql/basic/</guid>
      <description>
        
        
        &lt;h2&gt;过滤器&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;过滤器&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%bf%87%e6%bb%a4%e5%99%a8&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/onpelg16wg77xin6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据查询&lt;/a&gt;部分我们已经用 MetricsQL 获取了指标 &lt;code&gt;foo_bar&lt;/code&gt; 的数据。只需在查询中写入指标名称，就能轻松完成：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo_bar&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;一个简单的指标名称会得到拥有不同 label 组合的多个 Timeseries 返回响应值。比如：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;requests_total{path=&amp;#34;/&amp;#34;, code=&amp;#34;200&amp;#34;} 
requests_total{path=&amp;#34;/&amp;#34;, code=&amp;#34;403&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;要选择具有特定 Label 的 Timeseries，需要在花括号中指定匹配 Label 的过滤器：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;requests_total{code=&amp;#34;200&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;上面的查询语句返回所有名字是 &lt;code&gt;requests_total &lt;/code&gt;并且 Label 带有&lt;code&gt;code=&amp;quot;200&amp;quot;&lt;/code&gt;的所有&lt;code&gt;Timeseries&lt;/code&gt;。我们用&lt;code&gt;=&lt;/code&gt;运算符来匹配 Label 值。对于反匹配使用&lt;code&gt;!=&lt;/code&gt;运算符。过滤器也通过&lt;code&gt;=~&lt;/code&gt;实现正则匹配，用&lt;code&gt;!~&lt;/code&gt;实现正则反匹配。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;requests_total{code=~&amp;#34;2.*&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;过滤器也可以被组合使用：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;requests_total{code=~&amp;#34;200&amp;#34;, path=&amp;#34;/home&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;上面的查询返回所有名字是&lt;code&gt;request_total&lt;/code&gt;，同时带有 &lt;code&gt;code=&amp;quot;200&amp;quot;&lt;/code&gt; 和 &lt;code&gt;path=&amp;quot;/home&amp;quot;&lt;/code&gt; Label 的所有 Timeseries。&lt;/p&gt;
&lt;h3&gt;使用名字过滤&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;使用名字过滤&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e5%90%8d%e5%ad%97%e8%bf%87%e6%bb%a4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;有时我们可能需要同时返回多个监控指标。就如同&lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/usya0z8utkby2rog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据模型&lt;/a&gt;中提到的，Metric 名称本质上也是一个普通的 Label 的值，其 Label 名是&lt;code&gt;__name__&lt;/code&gt;。所以可以通过对 Metric 名使用正则的方式，来过滤出多个指标名的数据：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;{__name__=~&amp;#34;requests_(error|success)_total&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;上面的查询语句会返回 2 个 Metric 的 Timeseries：&lt;code&gt;requests_error_total&lt;/code&gt; 和&lt;code&gt;requests_success_total&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;利用 or 使用多个过滤器&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;利用-or-使用多个过滤器&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%88%a9%e7%94%a8-or-%e4%bd%bf%e7%94%a8%e5%a4%9a%e4%b8%aa%e8%bf%87%e6%bb%a4%e5%99%a8&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MetricsQL&lt;/a&gt; 支持查询至少满足多个过滤器中的一个方式来获取 Timeseries。这些过滤器必须在花括号内使用 &lt;code&gt;or&lt;/code&gt; 分割。 比如，下面的查询代表查询 Label 满足 &lt;code&gt;{job=&amp;quot;app1&amp;quot;,env=&amp;quot;prod&amp;quot;}&lt;/code&gt; 或 &lt;code&gt;{job=&amp;quot;app2&amp;quot;,env=&amp;quot;dev&amp;quot;}&lt;/code&gt; 的 Timeseries：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;{job=&amp;#34;app1&amp;#34;,env=&amp;#34;prod&amp;#34; or job=&amp;#34;app2&amp;#34;,env=&amp;#34;dev&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;过滤器的个数是没有限制的。这个功能可以对查询到的 series 直接运用 &lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/wxvn5kgfgqsp68bl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rollup 函数&lt;/a&gt;（比如 &lt;a href=&#34;https://www.yuque.com/icloudfly/xs51ky/wxvn5kgfgqsp68bl#RipcU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rate&lt;/a&gt;），这样就不需要使用&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#subqueries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;子查询&lt;/a&gt;了：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate({job=&amp;#34;app1&amp;#34;,env=&amp;#34;prod&amp;#34; or job=&amp;#34;app2&amp;#34;,env=&amp;#34;dev&amp;#34;}[5m])&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;如果你需要对同一 Label 使用多个过滤器来查询 Timeseries，从性能角度来看，最好使用正则表达式&lt;code&gt;{label=~&amp;quot;value1|...|valueN&amp;quot;}&lt;/code&gt; 而不是使用&lt;code&gt;{label=&amp;quot;value1&amp;quot; or ... or label=&amp;quot;valueN&amp;quot;}&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;算数运算&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;算数运算&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%ae%97%e6%95%b0%e8%bf%90%e7%ae%97&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MetricsQL 支持所有基本的算数运算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加法 - &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;减法 - &lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;乘法 - &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;除法 - &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;取模 - &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指数 - &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以在多个指标之间进行各种计算。比如，下面的查询语句就是计算错误请求率：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;(requests_error_total / (requests_error_total &amp;#43; requests_success_total)) * 100&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h3&gt;合并多个 Timeseries&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;合并多个-timeseries&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%90%88%e5%b9%b6%e5%a4%9a%e4%b8%aa-timeseries&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;要使用算术运算合并多个 Timeseries ，我们需要了解匹配规则。否则，查询会出错或给出错误的结果。匹配规则的逻辑很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MetricsQL引擎在不影响 Label 的情况下，从算术操作左右两侧的所有 Timeseries 中&lt;strong&gt;去除指标名称&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对于左侧的每个 Timeseries，MetricsQL 引擎会在右侧搜索具有相同 Label Set 的 Timeseries，对每个数据点执行运算操作，并返回具有相同 Label Set 的结果时间序列。&lt;strong&gt;如果没有匹配项，则结果时间序列将从结果中删除。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;匹配规则可以通过&lt;code&gt;ignore&lt;/code&gt;、&lt;code&gt;on&lt;/code&gt;、&lt;code&gt;group_left&lt;/code&gt;和&lt;code&gt;group_right&lt;/code&gt;运算符进行扩展。详细信息请参阅&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这些文档&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;比较运算&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;比较运算&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%af%94%e8%be%83%e8%bf%90%e7%ae%97&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MetricsQL 支持下面这些比较运算符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等于 - &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不等于 - &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大于 - &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大于等于 - &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小于 - &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小于等于 - &lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些运算符可以像算术运算符一样应用于任意的 MetricsQL 表达式。比较运算的结果是只包含 value 匹配成功的的 Timeseries。例如，下面的查询将仅返回内存使用超过&lt;code&gt;100MB&lt;/code&gt;的进程列表。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;process_resident_memory_bytes &amp;gt; 100*1024*1024&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;聚合与分组函数&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;聚合与分组函数&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%81%9a%e5%90%88%e4%b8%8e%e5%88%86%e7%bb%84%e5%87%bd%e6%95%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MetricsQL 支持对 Timeseries 进行分组聚合。Timeseries 使用指定的一组 Label 进行分组，然后使用指定的聚合方法对每组 Timeseries 的 value 做聚合计算。 比如，下面的查询返回每个 job 的 内存使用率总和：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;sum(process_resident_memory_bytes) by (job)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;更多参见 MetricsQL 的&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#aggregate-functions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;聚合函数文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;计算速率&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;计算速率&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%ae%a1%e7%ae%97%e9%80%9f%e7%8e%87&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对于 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/he-xin-gai-nian#counter-ji-shu-qi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Counter&lt;/a&gt; 类型指标使用最广泛的的一个函数是 &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#rate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rate&lt;/a&gt;。它对每一个 Timeseries 独立计算每秒的平均增长率。比如，下面的查询返回的是每一个 node_exporter 实例监控到的每秒平均入流量， &lt;code&gt;node_network_receive_bytes_total&lt;/code&gt; 指标是它暴露出来的一个监控指标。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate(node_network_receive_bytes_total)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;默认情况下，无论是 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/shu-ju-cha-xun#instant-query&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instance Query&lt;/a&gt; 还是 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/shu-ju-cha-xun#range-query-fan-wei-cha-xun&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Range Query&lt;/a&gt;，VictoriaMetrics 都使用 &lt;code&gt;step&lt;/code&gt; 参数指定的窗口大小，对回溯区间内的样本执行 &lt;code&gt;rate&lt;/code&gt; 计算。&lt;code&gt;rate&lt;/code&gt; 需要计算的时间间隔可以在一个中括号中指定。比如：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate(node_network_receive_bytes_total[5m])&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;在这个例子中，VictoriaMetrics 使用指定的回溯窗口 &lt;code&gt;5m&lt;/code&gt;(5分钟)。来计算平均每秒增长。通常情况下回溯窗口越大，曲线图形就约平滑。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rate&lt;/code&gt; 会保留 timeseries 中的所有 Label，除了 Metric 名称。如果你想要保留 Metric 名称，就需要在 &lt;code&gt;rate(...)&lt;/code&gt; 后面使用 &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#keep_metric_names&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keep_metric_names&lt;/a&gt; 修改器。比如，下面的语句就是在计算 &lt;code&gt;rate()&lt;/code&gt; 后保留 Metric 名称：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rate(node_network_receive_bytes_total) keep_metric_names&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;rate()&lt;/code&gt; 能且只能用于 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/he-xin-gai-nian#counter-ji-shu-qi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Counter&lt;/a&gt; 类指标。对 &lt;a href=&#34;https://www.victoriametrics.com.cn/victoriametrics/he-xin-gai-nian#gauge-yi-biao&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gauge&lt;/a&gt; 类型指标应用 &lt;code&gt;rate&lt;/code&gt; 是没意义的。&lt;/p&gt;
&lt;h2&gt;keep_metric_names&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;keep_metric_names&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#keep_metric_names&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;默认情况下，Metric 名称会在应用函数或&lt;a href=&#34;#suan-shu-yun-suan&#34; &gt;算数运算&lt;/a&gt;后被丢弃，因为它们会改变原始指标的含义。当函数作用于多个名称不同的时间序列时，可能会导致&lt;code&gt;duplicate time series&lt;/code&gt;错误。这个错误可以使用&lt;code&gt;keep_metric_names&lt;/code&gt;修改器来解决。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate({__name__=~&amp;quot;foo|bar&amp;quot;}) keep_metric_names&lt;/code&gt;会在查询结算结果中保留&lt;code&gt;foo&lt;/code&gt;和&lt;code&gt;bar&lt;/code&gt;这 2 个 Metric 名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;({__name__=~&amp;quot;foo|bar&amp;quot;} / 10) keep_metric_names&lt;/code&gt;会在查询结算结果中保留&lt;code&gt;foo&lt;/code&gt;和&lt;code&gt;bar&lt;/code&gt;这 2 个 Metric 名称。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>函数</title>
      <link>http://localhost:1313/docs/query/metricsql/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/query/metricsql/functions/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>PromQL 新手入门</title>
      <link>http://localhost:1313/docs/query/metricsql/promql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/query/metricsql/promql/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PromQL&lt;/a&gt; 是 &lt;a href=&#34;https://prometheus.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus&lt;/a&gt; 系统的查询语言。它是为绘图、告警或派生 Timeseries（通过 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recording rules&lt;/a&gt;） 场景而设计的强大且简单的语言。PromQL 是从零开始设计的，与其他在时间序列数据库中使用的查询语言（比如 &lt;a href=&#34;https://www.timescale.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TimescaleDB 的 SQ&lt;/a&gt;L，&lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.7/query_language/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InfluxQL&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/influxdata/flux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flux&lt;/a&gt;）没有任何共同之处。&lt;/p&gt;
&lt;p&gt;这样做可以为典型的 TSDB 查询创建一个清晰的语言。但是它也有代价 - 初学者通常需要花费几个小时阅读官方的&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PromQL文档&lt;/a&gt;，才能理解其工作原理。让我们简化和缩短 PromQL 的学习曲线。&lt;/p&gt;
&lt;h2&gt;查询一个 Timeseries&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;查询一个-timeseries&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%9f%a5%e8%af%a2%e4%b8%80%e4%b8%aa-timeseries&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;选择使用 PromQL 查询 Timeseries 就像在查询中写入一个时间序列名称一样简单。例如，下面的查询将返回所有名称为&lt;code&gt;node_network_receive_bytes_total&lt;/code&gt;的 timeseries：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;node_network_receive_bytes_total&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;这个名称源自于&lt;a href=&#34;https://github.com/prometheus/node_exporter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node_exporter指标&lt;/a&gt;，它包含了在各种网络接口上接收的字节数。这样一个简单的查询可能会返回具有相同名称但带有不同 Label Set 的多个 Timeseries。例如，上面的查询可能会返回以下 &lt;code&gt;device&lt;/code&gt; Label 等于&lt;code&gt;eth0&lt;/code&gt;、&lt;code&gt;eth1&lt;/code&gt;和&lt;code&gt;eth2&lt;/code&gt;的 Timeseries：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;node_network_receive_bytes_total{device=&amp;#34;eth0&amp;#34;}
node_network_receive_bytes_total{device=&amp;#34;eth1&amp;#34;}
node_network_receive_bytes_total{device=&amp;#34;eth2&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;不通的Label被放在了花括号中：&lt;code&gt;{device=&amp;quot;eth0&amp;quot;}&lt;/code&gt;, &lt;code&gt;{device=&amp;quot;eth1&amp;quot;}&lt;/code&gt;, &lt;code&gt;{device=&amp;quot;eth2&amp;quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;让我们来看下 TimescaleDB 的 SQL 来达到同样的效果：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;SELECT
  ts.metric_name_plus_tags,
  r.timestamps,
  r.values
FROM (
  (SELECT
   time_series_id,
   array_agg(timestamp ORDER BY timestamp) AS timestamps,
   array_agg(value ORDER BY timestamp) AS values
   FROM
   metrics
   WHERE
   time_series_id IN (
     SELECT id FROM time_series
     WHERE metric_name = &amp;#39;node_network_receive_bytes_total&amp;#39;
   )
   GROUP BY
   time_series_id
  )
) AS r JOIN time_series AS ts ON (r.time_series_id = ts.id)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;对比下来是不是觉得很简单。SQL 不得不写得更加复杂，才能与上述的PromQL查询结果相媲美。因为 SQL 不会自带时间范围和降采样机制，但这些都会被 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PromQL 的 /query_range&lt;/a&gt; 接口 使用&lt;code&gt;start&lt;/code&gt;，&lt;code&gt;end&lt;/code&gt;和&lt;code&gt;step&lt;/code&gt;参数自动完成。&lt;/p&gt;
&lt;h2&gt;使用Label过滤&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;使用label过滤&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8label%e8%bf%87%e6%bb%a4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个指标名称可能返回多个具有不同 Label Set 的 timeseries，就像上面的例子一样。如何选择只匹配&lt;code&gt;{device=&amp;quot;eth1&amp;quot;}&lt;/code&gt;的 timeseries？只需在查询中提及所需的 Label 即可：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;node_network_receive_bytes_total{device=&amp;#34;eth1&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;如果你想要查询除了 &lt;code&gt;eth1&lt;/code&gt; 的所有 timeseries，只需要把语句里的&lt;code&gt;=&lt;/code&gt;换成&lt;code&gt;!=&lt;/code&gt;就可以：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;node_network_receive_bytes_total{device!=&amp;#34;eth1&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;如何选择&lt;code&gt;device&lt;/code&gt;以 &lt;code&gt;eth&lt;/code&gt; 开头的所有 timeseries 呢？只需要使用正则表达式：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;node_network_receive_bytes_total{device=~&amp;#34;eth.&amp;#43;&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;这个正则过滤器支持 &lt;a href=&#34;https://golang.org/pkg/regexp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 语言&lt;/a&gt;（RE2）支持的所有写法。&lt;/p&gt;
&lt;p&gt;要查询所有&lt;code&gt;device&lt;/code&gt;不以 &lt;code&gt;eth&lt;/code&gt; 开头的 timeseries，则只需要把 &lt;code&gt;=~&lt;/code&gt; 替换为 &lt;code&gt;!~&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;node_network_receive_bytes_total{device!~&amp;#34;eth.&amp;#43;&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;使用多个Label过滤&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;使用多个label过滤&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e5%a4%9a%e4%b8%aalabel%e8%bf%87%e6%bb%a4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Label 过滤器可以被联合使用。举个例子：下面的查询语句只会返回&lt;code&gt;node42:9100&lt;/code&gt;实例中&lt;code&gt;device&lt;/code&gt;以&lt;code&gt;eth&lt;/code&gt;开头的 timeseries。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node_network_receive_bytes_total{instance=&amp;#34;node42:9100&amp;#34;, device=~&amp;#34;eth.+&amp;#34;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;这些 Label 过滤器之间是与运算关系。意思是『返回即匹配这个过滤器，又匹配那个过滤器的数据』。&lt;/p&gt;
&lt;p&gt;那如果实现或运算逻辑呢？当前的 PromQL 是不支持或运算的，但大多数场景是可以通过正则表达式来解决的。举个例子，下面的查询语句就会返回 &lt;code&gt;device&lt;/code&gt; 是 &lt;code&gt;eth1&lt;/code&gt; 或 &lt;code&gt;lo&lt;/code&gt; 的 timeseries。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node_network_receive_bytes_total{device=~&amp;#34;eth1|lo&amp;#34;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;对 Metric 名称使用正则过滤&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;对-metric-名称使用正则过滤&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%af%b9-metric-%e5%90%8d%e7%a7%b0%e4%bd%bf%e7%94%a8%e6%ad%a3%e5%88%99%e8%bf%87%e6%bb%a4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;有时我们可能需要同时返回多个监控指标。Metric 名称本质上也是一个普通的 Label 的值，其 Label 名是&lt;code&gt;__name__&lt;/code&gt;。所以可以通过对 Metric 名使用正则的方式，来过滤出多个指标名的数据。举个例子，下面的查询语句会返回 &lt;code&gt;node_network_receive_bytes_total&lt;/code&gt; 和&lt;code&gt;node_network_transmit_bytes_total&lt;/code&gt;两个指标的 timeseries 数据：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;{__name__=~&amp;#34;node_network_(receive|transmit)_bytes_total&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;对比最新数据和历史数据&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;对比最新数据和历史数据&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%af%b9%e6%af%94%e6%9c%80%e6%96%b0%e6%95%b0%e6%8d%ae%e5%92%8c%e5%8e%86%e5%8f%b2%e6%95%b0%e6%8d%ae&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PromQL 支持查询历史数据，并将它与当前最新数据进行合并或对比。只需要给查询语句增加一个 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;offset&lt;/a&gt;。举个例子，下面的查询语句会返回一周前名字是&lt;code&gt;node_network_receive_bytes_total&lt;/code&gt;的所有 timeseries：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;node_network_receive_bytes_total offset 7d&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;The following query would return points where the current GC overhead exceeds hour-old GC overhead by 1.5x.&lt;/p&gt;
&lt;p&gt;下面的查询将返回当前GC开销超过一小时前GC开销1.5倍的数据点。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;go_memstats_gc_cpu_fraction &amp;gt; 1.5 * (go_memstats_gc_cpu_fraction offset 1h)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;运算符 &lt;code&gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;*&lt;/code&gt; 在下面会有介绍。&lt;/p&gt;
&lt;h2&gt;计算速率&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;计算速率&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%ae%a1%e7%ae%97%e9%80%9f%e7%8e%87&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;细心的读者会注意到上面的查询语句在 &lt;a href=&#34;http://docs.grafana.org/features/datasources/prometheus/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana&lt;/a&gt; 上绘制的线条都是下面这样递增的样式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/327391/1722440580817-9e440abc-f80f-4e93-a956-7e87a58bb9d6.png&#34; alt=&#34;Counter 类型&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样的图表实用性几乎为零，因为它们显示的是难以解释的不断增长的Counter值，而我们想要的是网络带宽图表 —— 在图表左侧看到&lt;code&gt;MB/s&lt;/code&gt;。PromQL有一个神奇的函数可以实现这个功能 —— &lt;code&gt;rate()&lt;/code&gt;。它可以计算所有匹配时间序列的每秒速率：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate(node_network_receive_bytes_total[5m])&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;这样监控图就变正确了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/327391/1722440581004-c61de2df-5bbe-4539-bfb5-a4dd22d112b6.png&#34; alt=&#34;rate(counter[5m])&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查询语句中的 &lt;code&gt;[5m]&lt;/code&gt; 是什么意思呢？这是一个代表 &lt;code&gt;5m&lt;/code&gt;（5分钟）时间区间。在这个场景中，在计算每个时间点的每秒平均增长率时， 会往回看&lt;code&gt;5m&lt;/code&gt;的数据，即最近5分钟的每秒平均增长。每个数据点的计算公式可以简化为&lt;code&gt;(Vcurr-Vprev)/(Tcurr-Tprev)&lt;/code&gt;，&lt;code&gt;Vcurr&lt;/code&gt; 代表当前时间&lt;code&gt;Tcurr&lt;/code&gt;上的数值，&lt;code&gt;Vprev&lt;/code&gt; 代表在时间&lt;code&gt;Tprev&lt;/code&gt; 上的数值，其中&lt;code&gt;Tprev=Tcurr-5m&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果这看起来太复杂，那么就记住，这个时间区间越大，监控图就会约平滑；而更小的时间区间会让监控图变得更加跳跃（抖动）。VictoriaMetrics 对 PromQL 进行了扩展，这个时间区间&lt;code&gt;[d]&lt;/code&gt;可以省略不写，缺省情况下就是2个数据点之间的间隔（通过&lt;code&gt;step&lt;/code&gt;参数指定的），而&lt;code&gt;step&lt;/code&gt;的默认缺省值是&lt;code&gt;5m&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate(node_network_receive_bytes_total)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;速率(rate)的缺陷&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;速率rate的缺陷&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%80%9f%e7%8e%87rate%e7%9a%84%e7%bc%ba%e9%99%b7&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Rate 删除度量名称，同时保留内部时间序列的所有 Label。&lt;/p&gt;
&lt;p&gt;不要对可能上下波动的时间序列使用 Rate。此类时间序列称为 &lt;a href=&#34;https://prometheus.io/docs/concepts/metric_types/#gauge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gauge&lt;/a&gt;。Rate 只能应用于 &lt;a href=&#34;https://prometheus.io/docs/concepts/metric_types/#counter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Counter&lt;/a&gt;，Counter 总是上升的，但有时可能会重置为零（例如，服务重启时）。&lt;/p&gt;
&lt;p&gt;不要用&lt;code&gt;irate&lt;/code&gt;代替&lt;code&gt;rate&lt;/code&gt;，因为它不能&lt;a href=&#34;https://medium.com/@valyala/why-irate-from-prometheus-doesnt-capture-spikes-45f9896d7832&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;捕捉尖峰&lt;/a&gt;，而且查询速度也比&lt;code&gt;rate&lt;/code&gt;快不了多少。&lt;/p&gt;
&lt;h2&gt;算术运算&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;算术运算&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%ae%97%e6%9c%af%e8%bf%90%e7%ae%97&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PromQL 支持所有基础的算术运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加法 (+)&lt;/li&gt;
&lt;li&gt;减法 (-)&lt;/li&gt;
&lt;li&gt;乘法 (*)&lt;/li&gt;
&lt;li&gt;除法 (/)&lt;/li&gt;
&lt;li&gt;取模 (%)&lt;/li&gt;
&lt;li&gt;指数 (^)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就可以进行各种数据转换。比如，将&lt;code&gt;bytes/s&lt;/code&gt;转换成&lt;code&gt;bits/s&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate(node_network_receive_bytes_total[5m]) * 8&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;此外，也可以进行跨指标运算。例如，&lt;a href=&#34;https://www.influxdata.com/blog/practical-uses-of-cross-measurement-math-in-flux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;该文中巨大的 Flux 查询&lt;/a&gt;就可以简单地用下面的 PromQL 语句表达：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;co2 * (((temp_c &amp;#43; 273.15) * 1013.25) / (pressure * 298.15))&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;将多个时间序列与算术运算结合起来需要了解&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;匹配规则&lt;/a&gt;。否则查询可能会导致数据中断或不正确的结果。匹配规则的基础很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PromQL 引擎从算术运算左侧和右侧的所有时间序列中剥离指标名称（Metric Name），但不触及标签（Label）&lt;/li&gt;
&lt;li&gt;对于左侧的每个时间序列，PromQL 引擎搜索右侧具有相同标签集（Label Set）的相应时间序列，对每个数据点应用运算操作，并返回具有相同标签集（Label Set）的运算结果。如果没有找到匹配的标签集合（Label Set），则时间序列会被从结果中忽略丢弃。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;匹配规则可以通过 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ignoring&lt;/a&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;,&lt;/a&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on&lt;/a&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;,&lt;/a&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;group_left&lt;/a&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;和&lt;/a&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;group_right&lt;/a&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;修饰符&lt;/a&gt;进行增强。不过其逻辑非常复杂，大多数场景都不需要使用。&lt;/p&gt;
&lt;h2&gt;比较运算&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;比较运算&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%af%94%e8%be%83%e8%bf%90%e7%ae%97&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PromQL 支持下面几种&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#comparison-binary-operators&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;比较运算&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等于 (==)&lt;/li&gt;
&lt;li&gt;不等于 (!=)&lt;/li&gt;
&lt;li&gt;大于 (&amp;gt;)&lt;/li&gt;
&lt;li&gt;大于等于 (&amp;gt;=)&lt;/li&gt;
&lt;li&gt;小于 (&amp;lt;)&lt;/li&gt;
&lt;li&gt;小于等于 (&amp;lt;=)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些运算符可以像算术运算符一样应用于任意 PromQL 表达式。 比较操作的结果是具有唯一匹配数据点的时间序列。 例如，以下查询将仅返回小于 2300 字节/秒的带宽&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate(node_network_receive_bytes_total[5m]) &amp;lt; 2300&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;其结果如下图所示，图中会出现带宽超过 2300 字节/秒的间隙：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/327391/1722440580873-c594353c-f5c1-4afe-a5c6-10f61ea2956a.png&#34; alt=&#34;rate(node_network_receive_bytes_total[5m]) &amp;lt; 2300&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比较运算符的结果可以使用 bool 修饰符进行修改：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rate(node_network_receive_bytes_total[5m]) &amp;lt; bool 2300&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;在这个例子中，对于有数据的部分会被转化为&lt;code&gt;true（1）&lt;/code&gt;，没有数据的转换成&lt;code&gt;false（0）&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/327391/1722440580886-82ffc5fb-b81a-4fe3-99c4-230d705be26f.png&#34; alt=&#34;rate(node_network_receive_bytes_total[5m]) &amp;lt; bool 2300&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;分组聚合函数&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;分组聚合函数&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%88%86%e7%bb%84%e8%81%9a%e5%90%88%e5%87%bd%e6%95%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PromQL 支持对时间序列进行&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分组聚合&lt;/a&gt;。时间序列按给定的标签集（Labels）进行分组，然后将给定的聚合函数应用于每个组。 例如，以下查询将返回按实例分组的所有网络接口的入口流量总和：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;sum(rate(node_network_receive_bytes_total[5m])) by (instance)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;使用 Gauge&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;使用-gauge&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8-gauge&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gauge 是随时可能上下波动的时间序列。 例如，内存使用情况、温度或压力。 绘制仪表图表时，预计会看到图表上每个点的最小值、最大值、平均值和/或分位数值。PromQL 支持使用下面的函数完成这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#min_over_time&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;min_over_time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#max_over_time&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;max_over_time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#avg_over_time&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;avg_over_time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#quantile_over_time&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quantile_over_time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，以下查询将在图表上绘制每个时间序列的可用内存的最小值：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;min_over_time(node_memory_MemFree_bytes[5m])&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;VictoriaMetrics 为 PromQL 增添了 &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#rollup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rollup_*&lt;/a&gt; 函数，当处理 Gauge 时，它会自动返回 &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; 和 &lt;code&gt;avg&lt;/code&gt; 值，例如:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;rollup(node_memory_MemFree_bytes)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;操纵Label&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;操纵label&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%93%8d%e7%ba%b5label&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PromQL 提供了 2 个函数用于 Label 修改，丰富、删除或创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_replace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_replace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_join&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_join&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管这些函数使用起来很困难，但它们允许对所选时间序列上的标签进行强大的动态操作。 label_ 函数的主要用例是将标签转换为所需的值。&lt;/p&gt;
&lt;p&gt;VictoriaMetrics 提供了&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label-manipulation-functions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更丰富的而方便的 Label 改写方法&lt;/a&gt;了扩展了这方面的能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_set&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_set&lt;/a&gt; — 为时间序列额外增加 Label&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_del&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_del&lt;/a&gt; — 从时间序列中删除指定的 Label&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_keep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_keep&lt;/a&gt; — 从时间序列中保留指定的 Label，而删除其他所有 Label&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_copy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_copy&lt;/a&gt; — 把某个 Label Values 复制成其他 Label&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_move&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_move&lt;/a&gt;— 重命名 Label Name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_transform&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_transform&lt;/a&gt; — 将所有匹配了正则表达式的子串，替换到模板中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#label_value&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;label_value&lt;/a&gt; — 将规定 Label 的 Value 转换为数字，作为 Value 返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;一个查询返回多个结果&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;一个查询返回多个结果&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%b8%80%e4%b8%aa%e6%9f%a5%e8%af%a2%e8%bf%94%e5%9b%9e%e5%a4%9a%e4%b8%aa%e7%bb%93%e6%9e%9c&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;有时候我们需要使用一个 PromQl 语句查询多个时间序列结果。可以使用 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#logical-set-binary-operators&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;or&lt;/a&gt; 操作符。比如，下面的语句将会返回名为 &lt;code&gt;metric1&lt;/code&gt;、&lt;code&gt;metric2&lt;/code&gt; 和 &lt;code&gt;metric3&lt;/code&gt; 的时序数据结果：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;metric1 or metric2 or metric3&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;VictoriaMetrics 简化了语句的写法，只需要把这些指标用括号（）包围起来：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;(metric1, metric2, metric3)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;请注意，这里可以放置任何 PromQL 语句，而不仅仅只是指标名称。&lt;/p&gt;
&lt;p&gt;使用组合表达式 or 时候时，经常会掉进一个陷阱：具有重复标签集（Label Set）的数据结果将被跳过。 例如，以下查询将跳过 sum(b)，因为 sum(a) 和 sum(b) 具有相同的标签集（它们根本没有标签）：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;sum(a) or sum(b)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;总结&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;总结&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PromQL 是一种简单但功能强大的时间序列数据库查询语言。 它允许以简洁而清晰的方式编写典型的 TSDB 查询，特别是与 SQL、InfluxQL 或 Flux 进行比较时。 虽然它可能不支持一些查询，而这些场景是由强大的 SQL 查询支持的，但这些场景在实践中非常罕见，以至于我现在至少记不起一个。 如果您知道此类情况，请在评论中提及。&lt;/p&gt;
&lt;p&gt;本文并没有提及 PromQL 中所有的功能，因为本文仅针对初学者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本文没有提及很多&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/functions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;函数&lt;/a&gt;和&lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/operators/#logical-set-binary-operators&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;逻辑运算符&lt;/a&gt; 。&lt;/li&gt;
&lt;li&gt;本文没有包含&lt;a href=&#34;https://medium.com/@valyala/prometheus-subqueries-in-victoriametrics-9b1492b720b3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;子查询&lt;/a&gt;内容。&lt;/li&gt;
&lt;li&gt;本文没有包含查询模板(通过 &lt;code&gt;CTE&lt;/code&gt; or &lt;a href=&#34;https://victoriametrics.com/promql/expand-with-exprs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WITH templates&lt;/a&gt;), 它可以大大简化复杂的 PromQL 语句。&lt;/li&gt;
&lt;li&gt;本味没有提及很多 VictoriaMetrics 所支持的 &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MetricsQL&lt;/a&gt; 诸多有用特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我建议可以通过这个&lt;a href=&#34;https://promlabs.com/promql-cheat-sheet/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;备忘单&lt;/a&gt;来学习 PromQL。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>对比PromQL</title>
      <link>http://localhost:1313/docs/query/metricsql/promql-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/query/metricsql/promql-diff/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MetricsQL&lt;/a&gt; is a query language inspired by &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PromQL&lt;/a&gt;. It is used as a primary query language in &lt;a href=&#34;https://github.com/victoriaMetrics/victoriaMetrics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VictoriaMetrics&lt;/a&gt;, time series database and monitoring solution. MetricsQL claims to be backward-compatible with PromQL, so Grafana dashboards backed by a Prometheus datasource should work the same after switching from Prometheus to VictoriaMetrics.&lt;/p&gt;
&lt;p&gt;However, VictoriaMetrics is not 100% compatible with PromQL and never will be. Please read on and we will discuss why that is.&lt;/p&gt;
&lt;p&gt;For a long time, there was no way to measure compatibility with PromQL. There was not even a fully defined &lt;a href=&#34;https://promlabs.com/blog/2020/08/06/comparing-promql-correctness-across-vendors#what-is-correct-in-the-absence-of-a-specification&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PromQL specification&lt;/a&gt;. But, some time ago, the &lt;a href=&#34;https://prometheus.io/blog/2021/05/03/introducing-prometheus-conformance-program/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus Conformance Program&lt;/a&gt; was announced with the aim to certify software with a mark of compatibility with Prometheus — “Upon reaching 100%, the mark will be granted&amp;quot;. The open-source tool, &lt;a href=&#34;https://github.com/prometheus/compliance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prometheus/compliance&lt;/a&gt; was created to check for compatibility.&lt;/p&gt;
&lt;p&gt;Compatibility is measured in quite a simple way— the tool requires a configuration file with a &lt;a href=&#34;https://github.com/prometheus/compliance/blob/6d63e44ca06d317c879b7406ec24b01a82213aa0/promql/promql-compliance-tester.yml#L107&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;list of PromQL queries to run&lt;/a&gt;, a Prometheus server to use as a reference and any other software meant to be tested. The tool sends PromQL queries to both Prometheus and the tested software, and if their responses don&amp;rsquo;t match — it marks the query as having failed.&lt;/p&gt;
&lt;h1&gt;兼容性测试&lt;/h1&gt;&lt;p&gt;We ran compatibility testing between Prometheus &lt;a href=&#34;https://github.com/prometheus/prometheus/releases/tag/v2.30.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v2.30.0&lt;/a&gt; and VictoriaMetrics &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/releases/tag/v1.67.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v1.67.0&lt;/a&gt; and got the following result:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;====================================================================
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;General query tweaks:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*  VictoriaMetrics aligns incoming query timestamps to a multiple of the query resolution step.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;====================================================================
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Total: 385 / 529 (72.78%) passed, 0 unsupported&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;According to the test, VictoriaMetrics failed 149 tests and was compatible with Prometheus by 72.59% of the time. Let’s take a closer look at the queries that failed.&lt;/p&gt;
&lt;h1&gt;Keeping metric name&lt;/h1&gt;&lt;p&gt;According to PromQL, functions that transform a metric&amp;rsquo;s data should &lt;a href=&#34;https://github.com/prometheus/prometheus/issues/380&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;drop the metric name from the result&lt;/a&gt;, since the meaning of the initial metric has changed. However, this approach has some drawbacks. For example, the &lt;code&gt;max_over_time&lt;/code&gt; function calculates the max value of the series without changing its physical meaning. Therefore, MetricsQL &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/issues/674&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keeps the metric name for such functions&lt;/a&gt;. It also enables queries over multiple metric names: &lt;code&gt;max_over_time({__name__=~&amp;quot;process_(resident|virtual)_memory_bytes&amp;quot;}[1h])&lt;/code&gt;. While in PromQL such query fails with &lt;code&gt;vector cannot contain metrics with the same labelset&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt;Hence, test suit functions like &lt;code&gt;*_over_time&lt;/code&gt;, &lt;code&gt;ceil&lt;/code&gt; , &lt;code&gt;floor&lt;/code&gt; , &lt;code&gt;round&lt;/code&gt; , &lt;code&gt;clamp_*&lt;/code&gt; , &lt;code&gt;holt_winters&lt;/code&gt; , &lt;code&gt;predict_linear&lt;/code&gt; in VictoriaMetrics do intentionally contain the metric name in the results:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QUERY: avg_over_time(demo_memory_usage_bytes[1s])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-      Metric: s`{instance=&amp;#34;demo.promlabs.com:10002&amp;#34;, job=&amp;#34;demo&amp;#34;, type=&amp;#34;buffers&amp;#34;}`,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+     Metric: s`demo_memory_usage_bytes{instance=&amp;#34;demo.promlabs.com:10002&amp;#34;, job=&amp;#34;demo&amp;#34;, type=&amp;#34;buffers&amp;#34;}`,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;There were 92 (~17% of 529 tests total) such queries in the test suite which failed because the metric name is present in the response from VictoriaMetrics, while the values in the response are identical. VictoriaMetrics isn&amp;rsquo;t going to change this behavior as their users find this is more logical and &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/issues/1384&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rely on it&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Better rate()&lt;/h1&gt;&lt;p&gt;凡是涉及对回溯窗口样本值首尾样本值进行计算的 rollup 函数，比如 &lt;code&gt;rate&lt;/code&gt;、&lt;code&gt;delta&lt;/code&gt;、&lt;code&gt;increase&lt;/code&gt; 等函数；其MetricsQL 和 PromQL 都存在统一的计算差异。因此 VictoriaMetrics 使用 &lt;code&gt;xxx_prometheus&lt;/code&gt; 的命名提供了兼容 Prometheus 统计方式的 rollup 函数，如 &lt;code&gt;rate_prometheus&lt;/code&gt;、&lt;code&gt;delta_prometheus&lt;/code&gt;、&lt;code&gt;increase_prometheus&lt;/code&gt; 等。而默认则使用 MetricsQL 的统计方式。&lt;/p&gt;
&lt;p&gt;以 increase 函数为例，MetricsQL 的计算方式更加精准，如下图所示。&lt;/p&gt;
&lt;p&gt;假设我们有5个样本值，当回溯窗口大小是&lt;code&gt;$__interval&lt;/code&gt; 时，我们期望得到的就是&lt;code&gt;V3-V1&lt;/code&gt;和&lt;code&gt;V5-V3&lt;/code&gt;两个值。即当前回溯窗口的最后一个样本值应该与前一个回溯窗口的最后一个样本值计算，而不是和本窗口的第一个样本值计算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/327391/1722440686793-e31e9908-d1be-4d29-8a72-aba08c0c8f2b.png&#34; alt=&#34;MetricsQL&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再看 Prometheus 的计算方式，如下图所示。它使用一个回溯窗口的最后一个样本值，与该窗口的第一个值进行计算。因为 V1 样本不在第一个窗口内，V3 不再第二个窗口内，这就导致 Prometheus 计算出来的值是&lt;code&gt;V3-V2&lt;/code&gt;和&lt;code&gt;V5-V4&lt;/code&gt;，结果并不正确。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/jpeg/327391/1722440686639-47e8b8bc-848a-4192-b94f-3f267f41a7b5.jpeg&#34; alt=&#34;PromQL&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此外，Prometheus 的这种统计方式还有另外一个问题。就是如果&lt;code&gt;$_interval&lt;/code&gt;大小的时间窗口内只有一个样本值，那么&lt;code&gt;rate&lt;/code&gt;和&lt;code&gt;increase&lt;/code&gt;这种汇总函数的结果为空。&lt;/p&gt;
&lt;p&gt;MetricsQL doesn&amp;rsquo;t apply extrapolation when calculating &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;increase&lt;/code&gt;. This solves the issue of fractional &lt;code&gt;increase()&lt;/code&gt; results over integer counters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/327391/1722440757828-574d7fdf-ea08-4b0e-ab64-6e8486cc0479.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;increase() query over time series generated by integer counter results in decimal values for Prometheus due to extrapolation.&lt;/p&gt;
&lt;p&gt;It is &lt;a href=&#34;https://www.robustperception.io/what-range-should-i-use-with-rate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quite important&lt;/a&gt; to choose the correct lookbehind window for &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;increase&lt;/code&gt; in Prometheus. Otherwise, incorrect or no data may be returned. &lt;a href=&#34;https://grafana.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana&lt;/a&gt; even introduced a special variable &lt;a href=&#34;https://grafana.com/blog/2020/09/28/new-in-grafana-7.2-__rate_interval-for-prometheus-rate-queries-that-just-work/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;$__rate_interval&lt;/a&gt; to address this issue, but it may cause more problems than it solves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users need to configure the scrape interval value in datasource settings to get it to work;&lt;/li&gt;
&lt;li&gt;Users still need to add &lt;code&gt;$__rate_interval&lt;/code&gt; manually to every query that uses &lt;code&gt;rate&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;It won&amp;rsquo;t work if the datasource stores metrics with different scrape intervals (e.g. global view across multiple datasources);&lt;/li&gt;
&lt;li&gt;It only works in Grafana.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In MetricsQL, a lookbehind window in square brackets may be omitted. VictoriaMetrics automatically selects the lookbehind window depending on the current step, so &lt;code&gt;rate(node_network_receive_bytes_total)&lt;/code&gt; works just as &lt;code&gt;rate(node_network_receive_bytes_total[$__interval])&lt;/code&gt;. And even if the interval is too small to capture enough data points, MetricsQL will automatically expand it. That&amp;rsquo;s why queries like &lt;code&gt;deriv(demo_disk_usage_bytes[1s])&lt;/code&gt; return no data for Prometheus and VictoriaMetrics expands the lookbehind window prior to making calculations.&lt;/p&gt;
&lt;p&gt;There are 39 (~7% of 529 tests total) queries (rate, increase, deriv, changes, irate, idelta, resets, etc.) exercising this logic which cause the difference in results between VictoriaMetrics and Prometheus:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QUERY: rate(demo_cpu_usage_seconds_total[5m])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-           Value:     Inverse(TranslateFloat64, float64(1.9953032056421414)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+           Value:     Inverse(TranslateFloat64, float64(1.993400981075324)),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;For more details about how rate/increase works in MetricsQL please check &lt;a href=&#34;https://docs.victoriametrics.com/MetricsQL.html#rate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt; and &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/issues/1215#issuecomment-850305711&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example on github&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;NaNs&lt;/h1&gt;&lt;p&gt;NaNs are unexpectedly complicated. Let&amp;rsquo;s begin with the fact that in &lt;a href=&#34;https://www.robustperception.io/get-thee-to-a-nannary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus there are two types of NaNs&lt;/a&gt;: &lt;a href=&#34;https://github.com/prometheus/prometheus/blob/19152a45d8a8f841206d321f79a60ab6d365a98f/pkg/value/value.go#L22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;normal NaN&lt;/a&gt; and &lt;a href=&#34;https://github.com/prometheus/prometheus/blob/19152a45d8a8f841206d321f79a60ab6d365a98f/pkg/value/value.go#L28&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stale NaN&lt;/a&gt;. Stale NaNs are used as &amp;ldquo;staleness makers&amp;rdquo; — special values used to identify a time series that had become stale. VictoriaMetrics didn&amp;rsquo;t initially support this because VictoriaMetrics needed to integrate with many systems beyond just Prometheus and had to have a way to detect staleness uniformly for series ingested via Graphite, Influx, OpenTSDB and other supported data ingestion protocols. Support of Prometheus staleness markers was &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/issues/1526&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recently added&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Normal NaNs are results of mathematical operations, e.g. &lt;code&gt;0/0=NaN&lt;/code&gt;. However, in OpenMetrics there is &lt;a href=&#34;https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#nan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;no special meaning or use case for NaNs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While NaNs are expected when evaluating mathematical expressions, it is not clear how useful they are for users, or if there are any benefits to return NaNs in the result. It looks like the opposite is true because users are &lt;a href=&#34;https://stackoverflow.com/questions/53430836/prometheus-sum-one-nan-value-result-into-nan-how-to-avoid-it&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;often&lt;/a&gt;&lt;a href=&#34;https://github.com/prometheus/prometheus/issues/7637&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;confused&lt;/a&gt;&lt;a href=&#34;https://github.com/prometheus/prometheus/issues/6780&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;with&lt;/a&gt; the &lt;a href=&#34;https://github.com/prometheus/prometheus/issues/6645&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;received&lt;/a&gt;&lt;a href=&#34;https://stackoverflow.com/questions/47056557/how-to-gracefully-avoid-divide-by-zero-in-prometheus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;results&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;MetricsQL consistently deletes NaN from query responses. This behavior is intentional because there is no meaningful way to use such results. That&amp;rsquo;s why testing queries such as &lt;code&gt;demo_num_cpus * NaN&lt;/code&gt; or &lt;code&gt;sqrt(-demo_num_cpus)&lt;/code&gt; return an empty response in MetricsQL, and returns NaNs in PromQL.&lt;/p&gt;
&lt;p&gt;There were 6 (~1% of 529 tests total) queries in thetest suite expecting NaNs in responses: &lt;code&gt;sqrt(-metric)&lt;/code&gt; , &lt;code&gt;ln(-metric)&lt;/code&gt; , &lt;code&gt;log2(-metric)&lt;/code&gt; , &lt;code&gt;log10(-metric)&lt;/code&gt; and &lt;code&gt;metric * NaN&lt;/code&gt; .&lt;/p&gt;
&lt;h1&gt;Negative offsets&lt;/h1&gt;&lt;p&gt;VictoriaMetrics supports negative offsets and Prometheus also does as well starting with version &lt;a href=&#34;https://github.com/prometheus/prometheus/releases/tag/v2.26.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2.26&lt;/a&gt; if a specific feature flag is enabled. However, query results are different even with the enabled feature flag due to the fact that Prometheus continues the last value of the metric during the additional 5min:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/327391/1722440758086-707ffe51-0ff6-400f-9372-11d0fe7e959e.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;VictoriaMetrics vs Prometheus negative offset query. VictoriaMetrics response value is shifted by 1e7 to show the difference between the lines visually. Without this shift, they are identical except the last 5min.&lt;/p&gt;
&lt;p&gt;Such behavior was unexpected to us. To get more details about it please check the following discussion:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/prometheus/discussions/9428&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Series with negative offset are continued with the last value up to 5min · Discussion #9428 ·…You can&amp;rsquo;t perform that action at this time. You signed in with another tab or window. You signed out in another tab or…github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VictoriaMetrics isn&amp;rsquo;t going to change the logic of negative offsets because this feature was released &lt;a href=&#34;https://github.com/prometheus/prometheus/issues/6282#issuecomment-564301756&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2 years before&lt;/a&gt; Prometheus did it and users rely on that.&lt;/p&gt;
&lt;p&gt;There were 3 (~0.5% of 529 tests total) queries for -1m, -5m, -10m offsets in the test suite:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QUERY: demo_memory_usage_bytes offset -1m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RESULT: FAILED: Query succeeded, but should have failed.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h1&gt;Precision loss&lt;/h1&gt;&lt;p&gt;VictoriaMetrics fails the following test case:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QUERY: demo_memory_usage_bytes % 1.2345
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Timestamp: s&amp;#34;1633073960&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Value: Inverse(TranslateFloat64, float64(0.038788650870683394)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ Value: Inverse(TranslateFloat64, float64(0.038790081382158004)),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;The result is indeed different. It is off on the 5th digit after the decimal point and the reason for this is not in MetricsQL but in VictoriaMetrics itself. The query result isn&amp;rsquo;t correct because the raw data point value for this specific metric doesn&amp;rsquo;t match between Prometheus and VictoriaMetrics:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl  --data-urlencode &amp;#39;query=demo_memory_usage_bytes{instance=&amp;#34;demo.promlabs.com:10000&amp;#34;, type=&amp;#34;buffers&amp;#34;}&amp;#39; --data-urlencode &amp;#39;time=1633504838&amp;#39; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&amp;#34;value&amp;#34;:[1633504838,&amp;#34;148164507.40843752&amp;#34;]}]}}%                                                                                  curl  --data-urlencode &amp;#39;query=demo_memory_usage_bytes{instance=&amp;#34;demo.promlabs.com:10000&amp;#34;, type=&amp;#34;buffers&amp;#34;}&amp;#39; --data-urlencode &amp;#39;time=1633504838&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&amp;#34;value&amp;#34;:[1633504838,&amp;#34;148164507.4084375&amp;#34;]}]}}%&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;VictoriaMetrics may reduce the precision of values with more than 15 decimal digits due to the &lt;a href=&#34;https://faun.pub/victoriametrics-achieving-better-compression-for-time-series-data-than-gorilla-317bc1f95932&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;used compression algorithm&lt;/a&gt;. If you want to get more details about how and why this happens, please read the &amp;ldquo;Precision loss&amp;rdquo; section in &lt;a href=&#34;https://medium.com/@valyala/evaluating-performance-and-correctness-victoriametrics-response-e27315627e87&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Evaluating Performance and Correctness&lt;/a&gt;. In fact, any solution that works with floating point values has precision loss issues because of the nature of &lt;a href=&#34;https://en.wikipedia.org/wiki/Floating-point_arithmetic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;floating-point arithmetic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While such precision loss may be important in rare cases, it doesn&amp;rsquo;t matter in most practical cases because the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observational_error&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;measurement error&lt;/a&gt; is usually much larger than the precision loss.&lt;/p&gt;
&lt;p&gt;While VictoriaMetrics does have higher precision loss than Prometheus, we believe it is completely justified by the &lt;a href=&#34;https://valyala.medium.com/prometheus-vs-victoriametrics-benchmark-on-node-exporter-metrics-4ca29c75590f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;compression gains&lt;/a&gt; our solution generates. Moreover, only 3 (~0.5% of 529 tests total) queries from the test suite fail due to precision loss.&lt;/p&gt;
&lt;h1&gt;Query succeeded, but should have failed&lt;/h1&gt;&lt;p&gt;The following query fails for PromQL but works in MetricsQL:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QUERY: {__name__=~&amp;#34;.*&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RESULT: FAILED: Query succeeded, but should have failed.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;PromQL rejects such a query to prevent database overload because query &lt;a href=&#34;https://github.com/prometheus/prometheus/issues/2162&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;selects all the metrics&lt;/a&gt; from it. At the same time, PromQL does not prevent a user from running an almost identical query&lt;code&gt;{__name__=~&amp;quot;.+&amp;quot;}&lt;/code&gt; , which serves the same purpose.&lt;/p&gt;
&lt;p&gt;The other example of a failing query is the following:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QUERY: label_replace(demo_num_cpus, &amp;#34;~invalid&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;src&amp;#34;, &amp;#34;(.*)&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RESULT: FAILED: Query succeeded, but should have failed.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;The query fails for PromQL because it doesn&amp;rsquo;t allow using &lt;code&gt;~&lt;/code&gt; char in label names. VictoriaMetrics accepts data ingestion from various protocols and systems where such char is allowed, so it &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/issues/672#issuecomment-670189308&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;has to support&lt;/a&gt; a wider list of allowed chars.&lt;/p&gt;
&lt;p&gt;There were 2 (~0.3% of 529 tests total) queries that failed because of incompatibility but we can’t imagine a situation where it would harm a user’s experience.&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;&lt;p&gt;There are differences between MetricsQL and PromQL. MetricsQL was created long after the PromQL with the goal of improving the user experience and making the language easier to use and understand.&lt;/p&gt;
&lt;p&gt;How compatibility is measured in the &lt;a href=&#34;https://prometheus.io/blog/2021/05/03/introducing-prometheus-conformance-program/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus Conformance Program&lt;/a&gt; isn&amp;rsquo;t ideal because it really only shows if the tested software uses Prometheus PromQL library under the hood or not. This is particularly complicated for solutions written in programming languages other than Go.&lt;/p&gt;
&lt;p&gt;By the way, the percentage of failing tests is easy to increase or decrease by changing the number of range intervals (e.g. 1m, 5m etc.) in tests. In the case of VictoriaMetrics, about 90 tests have failed not because of wrong calculations, but because of the metric name present in the response. Of course, there is no ideal way to be fair to everyone. That&amp;rsquo;s why this post exists to explain the differences.&lt;/p&gt;
&lt;p&gt;We also want to say a big thank you to &lt;a href=&#34;https://github.com/juliusv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Julius Volz&lt;/a&gt;, the author of these &lt;a href=&#34;https://promlabs.com/promql-compliance-tests/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;compliance tests&lt;/a&gt;. Thanks to his work and patience we were able to fix most of the real incompatibility issues in MetricsQL.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
